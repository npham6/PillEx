"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthHeadersLink = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var R = _interopRequireWildcard(require("ramda"));

var _apolloLink = require("apollo-link");

var assocWhenNotEmpty = function assocWhenNotEmpty(key, value) {
  return R.when(R.always(R.complement(R.either(R.isNil, R.isEmpty))(value)), R.assoc(key, value));
};

var AuthHeadersLink =
/*#__PURE__*/
function (_ApolloLink) {
  (0, _inherits2.default)(AuthHeadersLink, _ApolloLink);

  function AuthHeadersLink(_ref) {
    var _this;

    var getAuthState = _ref.getAuthState;
    (0, _classCallCheck2.default)(this, AuthHeadersLink);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AuthHeadersLink).call(this));
    _this.getAuthState = getAuthState;
    return _this;
  }

  (0, _createClass2.default)(AuthHeadersLink, [{
    key: "request",
    value: function request(operation, forward) {
      var _this$getAuthState = this.getAuthState(),
          token = _this$getAuthState.token,
          workspaceId = _this$getAuthState.workspaceId;

      operation.setContext(R.over(R.lensProp('headers'), R.pipe(assocWhenNotEmpty('authorization', token ? "Bearer ".concat(token) : null), assocWhenNotEmpty('workspace', workspaceId))));
      return forward(operation);
    }
  }]);
  return AuthHeadersLink;
}(_apolloLink.ApolloLink);

exports.AuthHeadersLink = AuthHeadersLink;