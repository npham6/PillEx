"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenRefreshLink = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _apolloLink = require("apollo-link");

var R = _interopRequireWildcard(require("ramda"));

var _utils = require("./utils");

/**
 * Token Refresh Link renew authentication token when it's expired.
 * @param {TokenRefreshLinkOptions} options - The token refresh link options.
 * @param {Function} options.getRefreshTokenParameters - The function which are using for get refresh token parameters.
 * @param {Function} options.onAuthSuccess - The callback which called when attempt to refresh authentication is success.
 * @param {Function} [options.onAuthError] - The callback which called when attempt to refresh authentication is failed.
 * @param {Function} [options.onIdTokenExpired] - The callback which called when id token is expired.
 */
var TokenRefreshLink =
/*#__PURE__*/
function (_ApolloLink) {
  (0, _inherits2.default)(TokenRefreshLink, _ApolloLink);

  function TokenRefreshLink(_ref) {
    var _this;

    var onIdTokenExpired = _ref.onIdTokenExpired,
        onAuthError = _ref.onAuthError;
    (0, _classCallCheck2.default)(this, TokenRefreshLink);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TokenRefreshLink).call(this));
    _this.onAuthError = onAuthError;
    _this.onIdTokenExpired = onIdTokenExpired;
    return _this;
  }

  (0, _createClass2.default)(TokenRefreshLink, [{
    key: "request",
    value: function request(operation, forward) {
      var _this2 = this;

      return new _apolloLink.Observable(function (observer) {
        var subscription = null;
        var handling = false;

        var handleTokenRefresh = function handleTokenRefresh() {
          _this2.handleTokenExpired().then(function () {
            var observable = forward(operation);

            if (subscription) {
              subscription.unsubscribe();
            }

            handling = false;
            subscription = observable.subscribe(subscriber);
          }).catch(function (err) {
            _this2.handleAuthFailed(err);

            handling = false;
            observer.complete();
          });
        };

        var subscriber = {
          next: function next(data) {
            var dataErrors = data.errors || [];

            if ((0, _utils.hasIdTokenExpiredError)(dataErrors)) {
              handling = true;
              handleTokenRefresh();
            } else if ((0, _utils.hasRefreshTokenExpiredError)(dataErrors) || (0, _utils.hasTokenInvalidError)(dataErrors)) {
              _this2.handleAuthFailed();
            } else {
              observer.next(data);
            }
          },
          error: function error(_error) {
            var batchedErrors = R.pathOr([_error], ['response', 'parsed', 'errors'], _error);

            if ((0, _utils.hasIdTokenExpiredError)(batchedErrors)) {
              handling = true;
              handleTokenRefresh();
            } else if ((0, _utils.hasRefreshTokenExpiredError)(batchedErrors) || (0, _utils.hasTokenInvalidError)(batchedErrors)) {
              _this2.handleAuthFailed();
            } else {
              observer.error(_error);
            }
          },
          complete: function complete() {
            if (!handling) {
              observer.complete();
            }
          }
        };
        subscription = forward(operation).subscribe(subscriber);
        return subscription;
      });
    }
  }, {
    key: "handleTokenExpired",
    value: function handleTokenExpired() {
      if (typeof this.onIdTokenExpired === 'function') {
        return this.onIdTokenExpired();
      }

      return Promise.reject();
    }
  }, {
    key: "handleAuthFailed",
    value: function handleAuthFailed(err) {
      if (typeof this.onAuthError === 'function') {
        this.onAuthError(err);
      }
    }
  }]);
  return TokenRefreshLink;
}(_apolloLink.ApolloLink);

exports.TokenRefreshLink = TokenRefreshLink;