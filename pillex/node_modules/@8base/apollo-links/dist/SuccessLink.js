"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuccessLink = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _ramda = require("ramda");

var _apolloLink = require("apollo-link");

var SuccessLink =
/*#__PURE__*/
function (_ApolloLink) {
  (0, _inherits2.default)(SuccessLink, _ApolloLink);

  function SuccessLink(_ref) {
    var _this;

    var successHandler = _ref.successHandler;
    (0, _classCallCheck2.default)(this, SuccessLink);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SuccessLink).call(this));
    _this.successHandler = successHandler;
    return _this;
  }

  (0, _createClass2.default)(SuccessLink, [{
    key: "request",
    value: function request(operation, forward) {
      var _this2 = this;

      return new _apolloLink.Observable(function (observer) {
        forward(operation).subscribe({
          next: function next(data) {
            if ((0, _ramda.not)((0, _ramda.has)('errors', data))) {
              _this2.successHandler({
                operation: operation,
                data: data
              });
            }

            observer.next(data);
          },
          error: function error() {
            return observer.error.apply(observer, arguments);
          },
          complete: function complete() {
            return observer.complete.apply(observer, arguments);
          }
        });
      });
    }
  }]);
  return SuccessLink;
}(_apolloLink.ApolloLink);

exports.SuccessLink = SuccessLink;