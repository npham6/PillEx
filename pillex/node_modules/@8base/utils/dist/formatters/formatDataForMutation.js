"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDataForMutation = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var R = _interopRequireWildcard(require("ramda"));

var _constants = require("../constants");

var _selectors = require("../selectors");

var _verifiers = require("../verifiers");

var _formatFieldDataForMutation = require("./formatFieldDataForMutation");

/**

 * Formats entity data for create or update mutation based on passed schema.
 * @param {MutationType} type - The type of the mutation.
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 */
var formatDataForMutation = function formatDataForMutation(type, tableName, data, schema) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  if (R.not(type in _constants.MUTATION_TYPE)) {
    throw new Error("Invalid mutation type: ".concat(type));
  }

  if (R.isNil(data)) {
    return data;
  }

  var tableSchema = (0, _selectors.getTableSchemaByName)(tableName, schema);

  if (!tableSchema) {
    throw new Error("Table schema with ".concat(tableName, " name not found in schema."));
  }

  var formatedData = R.reduce(function (result, fieldName) {
    if (fieldName === '_description' || fieldName === '__typename') {
      return result;
    }

    var fieldSchema = (0, _selectors.getFieldSchemaByName)(fieldName, tableSchema);

    if (!fieldSchema) {
      // throw new Error(`Field schema with ${fieldName} name not found in table schema with ${tableSchema.name} name.`);
      return result;
    }

    var skip = options.skip;

    if (typeof skip === 'function' && skip(data[fieldName], fieldSchema)) {
      return result;
    }

    if ((0, _verifiers.isMetaField)(fieldSchema)) {
      return result;
    }

    var formatedFieldData = data[fieldName];

    if (((0, _verifiers.isFileField)(fieldSchema) || (0, _verifiers.isRelationField)(fieldSchema)) && (0, _verifiers.isListField)(fieldSchema)) {
      if (R.isNil(formatedFieldData)) {
        formatedFieldData = [];
      } else {
        formatedFieldData = R.reject(R.isNil, formatedFieldData);
      }

      if (formatedFieldData.length === 0 && type === _constants.MUTATION_TYPE.CREATE) {
        return result;
      }
    }

    formatedFieldData = (0, _formatFieldDataForMutation.formatFieldDataForMutation)(type, fieldSchema, formatedFieldData, schema);
    var mutate = options.mutate;

    if (typeof mutate === 'function') {
      formatedFieldData = mutate(formatedFieldData, data[fieldName], fieldSchema);
    }

    return (0, _objectSpread3.default)({}, result, (0, _defineProperty2.default)({}, fieldName, formatedFieldData));
  }, {}, R.keys(data));
  return formatedData;
};

exports.formatDataForMutation = formatDataForMutation;