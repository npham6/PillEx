"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatFieldDataForMutation = void 0;

var R = _interopRequireWildcard(require("ramda"));

var verifiers = _interopRequireWildcard(require("../verifiers"));

var _formatFieldDataList = require("./formatFieldDataList");

var _formatFieldData = require("./formatFieldData");

var formatFieldDataForMutation = function formatFieldDataForMutation(type, fieldSchema, data, schema) {
  var nextData = data;

  if (verifiers.isFileField(fieldSchema) || verifiers.isRelationField(fieldSchema)) {
    if (verifiers.isListField(fieldSchema)) {
      nextData = (0, _formatFieldDataList.formatFieldDataList)(type, fieldSchema, data, schema);
    } else {
      nextData = (0, _formatFieldData.formatFieldData)(type, fieldSchema, data, schema);
    }
  } else if (verifiers.isAddressField(fieldSchema)) {
    if (verifiers.isListField(fieldSchema)) {
      if (Array.isArray(nextData)) {
        nextData = R.reject(verifiers.isEmptyAddress, nextData);
      }
    } else {
      if (verifiers.isEmptyAddress(nextData)) {
        nextData = null;
      }
    }
  } else if (verifiers.isNumberField(fieldSchema)) {
    if (verifiers.isListField(fieldSchema)) {
      if (Array.isArray(nextData)) {
        nextData = R.reject(verifiers.isEmptyNumber, nextData);
        nextData = R.map(Number, nextData);
      }
    } else {
      if (verifiers.isEmptyNumber(nextData)) {
        nextData = null;
      } else {
        nextData = Number(nextData);
      }
    }
  }

  return nextData;
};

exports.formatFieldDataForMutation = formatFieldDataForMutation;