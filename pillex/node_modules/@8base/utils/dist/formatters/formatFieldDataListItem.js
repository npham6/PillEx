"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatFieldDataListItem = void 0;

var R = _interopRequireWildcard(require("ramda"));

var _verifiers = require("../verifiers");

var _selectors = require("../selectors");

var _constants = require("../constants");

var _formatDataForMutation = require("./formatDataForMutation");

var formatFieldDataListItem = function formatFieldDataListItem(type, fieldSchema, data, schema) {
  var nextData = data;

  if (R.isNil(nextData)) {
    return {
      type: type === _constants.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: {}
    };
  } else if (typeof nextData === 'string') {
    return {
      type: type === _constants.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: {
        id: nextData
      }
    };
  } else if (typeof nextData.id === 'string') {
    return {
      type: type === _constants.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: {
        id: nextData.id
      }
    };
  }

  if ((0, _verifiers.isRelationField)(fieldSchema)) {
    var relationTableSchema = (0, _selectors.getTableSchemaById)(fieldSchema.relation.refTable.id, schema);

    if (!relationTableSchema) {
      throw new Error("Relation table schema with ".concat(fieldSchema.relation.refTable.id, " id not found in schema."));
    }

    nextData = (0, _formatDataForMutation.formatDataForMutation)(type, relationTableSchema.name, nextData, schema);
  }

  return {
    type: 'create',
    data: nextData
  };
};

exports.formatFieldDataListItem = formatFieldDataListItem;