"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDataAfterQuery = void 0;

var R = _interopRequireWildcard(require("ramda"));

var _selectors = require("../selectors");

var _verifiers = require("../verifiers");

/**
 * Remove unnecessary data after fetch entity data by query
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 */
var formatDataAfterQuery = function formatDataAfterQuery(tableName, data, schema) {
  var tableSchema = (0, _selectors.getTableSchemaByName)(tableName, schema);

  if (!tableSchema) {
    throw new Error("Table schema with ".concat(tableName, " name not found in schema."));
  }

  var formatedData = R.reduce(function (result, fieldName) {
    var fieldSchema = (0, _selectors.getFieldSchemaByName)(fieldName, tableSchema);

    if (!fieldSchema) {
      return result;
    }

    if (((0, _verifiers.isRelationField)(fieldSchema) || (0, _verifiers.isFileField)(fieldSchema)) && (0, _verifiers.isListField)(fieldSchema)) {
      if (data[fieldName]) {
        result = R.assoc(fieldName, data[fieldName].items, result);
      }
    } else if (!(0, _verifiers.isMetaField)(fieldSchema)) {
      result = R.assoc(fieldName, data[fieldName], result);
    }

    if ((0, _verifiers.isRelationField)(fieldSchema) && !(0, _verifiers.isFileField)(fieldSchema) && result[fieldName]) {
      if ((0, _verifiers.isListField)(fieldSchema)) {
        result = R.assoc(fieldName, result[fieldName].map(function (_ref) {
          var id = _ref.id;
          return id;
        }), result);
      } else {
        result = R.assoc(fieldName, result[fieldName].id, result);
      }
    }

    return result;
  }, {}, R.keys(data));
  return formatedData;
};

exports.formatDataAfterQuery = formatDataAfterQuery;