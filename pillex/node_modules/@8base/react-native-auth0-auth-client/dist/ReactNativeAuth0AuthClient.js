"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeAuth0AuthClient = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _expo = require("expo");

var _jwtDecode = _interopRequireDefault(require("jwt-decode"));

var R = _interopRequireWildcard(require("ramda"));

var asyncStorageAccessor = _interopRequireWildcard(require("./asyncStorageAccessor"));

var toQueryString = R.pipe(R.mapObjIndexed(function (value, key) {
  return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value));
}), R.values, R.join('&'));
var isEmptyOrNil = R.either(R.isNil, R.isEmpty);
var getError = R.path(['params', 'error']);
var getErrorDescription = R.path(['params', 'error_description']);
var getIdToken = R.path(['params', 'id_token']);
var getEmail = R.path(['email']);
var isEmailVerified = R.path(['email_verified']);
var getState = R.pipe(R.prop('state'), function (state) {
  try {
    return JSON.parse(state);
  } catch (e) {
    return state;
  }
});

var prepareState = function prepareState(_ref) {
  var workspaceId = _ref.workspaceId;
  return workspaceId ? JSON.stringify({
    workspaceId: workspaceId
  }) : undefined;
};
/**
 * Create instacne of the react-native auth0 auth client.
 * @param {string} workspaceId Identifier of the 8base app workspace.
 * @param {string} domain Domain. See auth0 documentation.
 * @param {string} clientId Client id. See auth0 documentation.
 */


var ReactNativeAuth0AuthClient = function ReactNativeAuth0AuthClient(_ref2) {
  var _this = this;

  var clientId = _ref2.clientId,
      domain = _ref2.domain,
      workspaceId = _ref2.workspaceId;
  (0, _classCallCheck2.default)(this, ReactNativeAuth0AuthClient);
  (0, _defineProperty2.default)(this, "clientId", void 0);
  (0, _defineProperty2.default)(this, "domain", void 0);
  (0, _defineProperty2.default)(this, "workspaceId", void 0);
  (0, _defineProperty2.default)(this, "setAuthState",
  /*#__PURE__*/
  function () {
    var _ref3 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(state) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return asyncStorageAccessor.setAuthState(state);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }());
  (0, _defineProperty2.default)(this, "getAuthState",
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2() {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", asyncStorageAccessor.getAuthState());

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  })));
  (0, _defineProperty2.default)(this, "purgeAuthState",
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3() {
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return asyncStorageAccessor.purgeAuthState();

          case 2:
            _expo.AuthSession.dismiss();

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  })));
  (0, _defineProperty2.default)(this, "checkIsAuthorized",
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4() {
    var _ref7, token;

    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return asyncStorageAccessor.getAuthState();

          case 2:
            _ref7 = _context4.sent;
            token = _ref7.token;
            return _context4.abrupt("return", R.not(isEmptyOrNil(token)));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  })));
  (0, _defineProperty2.default)(this, "authorize",
  /*#__PURE__*/
  (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee5() {
    var options,
        redirectUrl,
        result,
        error,
        errorDescription,
        encodedIdToken,
        decodedIdToken,
        _args5 = arguments;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
            redirectUrl = _expo.AuthSession.getRedirectUrl();
            _context5.next = 4;
            return _expo.AuthSession.startAsync({
              authUrl: "".concat(_this.domain, "/authorize?").concat(toQueryString((0, _objectSpread2.default)({
                state: prepareState({
                  workspaceId: _this.workspaceId
                }),
                client_id: _this.clientId,
                response_type: 'id_token',
                scope: 'openid email profile',
                redirect_uri: redirectUrl,
                nonce: 'fakenonce'
              }, options)))
            });

          case 4:
            result = _context5.sent;

            if (!(result.type === 'success')) {
              _context5.next = 15;
              break;
            }

            error = getError(result);

            if (!error) {
              _context5.next = 10;
              break;
            }

            errorDescription = getErrorDescription(result);
            throw new Error(errorDescription || 'something went wrong while logging in');

          case 10:
            encodedIdToken = getIdToken(result);
            decodedIdToken = (0, _jwtDecode.default)(encodedIdToken);
            _context5.next = 14;
            return _this.setAuthState({
              token: encodedIdToken
            });

          case 14:
            return _context5.abrupt("return", {
              idToken: encodedIdToken,
              idTokenPayload: decodedIdToken,
              email: getEmail(decodedIdToken),
              isEmailVerified: isEmailVerified(decodedIdToken),
              state: getState(decodedIdToken)
            });

          case 15:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  })));
  (0, _defineProperty2.default)(this, "renewToken", function () {
    throw new Error('The function isn\'t implemented yet');
  });
  (0, _defineProperty2.default)(this, "changePassword", function () {
    throw new Error('The function isn\'t implemented yet');
  });
  this.clientId = clientId;
  this.domain = domain;
  this.workspaceId = workspaceId;
};

exports.ReactNativeAuth0AuthClient = ReactNativeAuth0AuthClient;