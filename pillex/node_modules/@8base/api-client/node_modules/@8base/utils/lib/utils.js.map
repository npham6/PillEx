{"version":3,"sources":["webpack://utils/webpack/universalModuleDefinition","webpack://utils/webpack/bootstrap","webpack://utils/external \"ramda\"","webpack://utils/./src/constants.js","webpack://utils/./src/selectors/getFieldSchemaByName.js","webpack://utils/./src/selectors/getTableSchemaByName.js","webpack://utils/./src/selectors/getTableSchemaById.js","webpack://utils/./src/selectors/index.js","webpack://utils/./src/verifiers/isFileField.js","webpack://utils/./src/verifiers/isListField.js","webpack://utils/./src/verifiers/isMetaField.js","webpack://utils/./src/verifiers/isRelationField.js","webpack://utils/./src/verifiers/index.js","webpack://utils/./src/formatters/formatFieldDataListItem.js","webpack://utils/./src/formatters/formatFieldDataList.js","webpack://utils/./src/formatters/formatFieldData.js","webpack://utils/./src/formatters/formatFieldDataForMutation.js","webpack://utils/./src/formatters/formatDataForMutation.js","webpack://utils/./src/formatters/formatDataAfterQuery.js","webpack://utils/./src/formatters/index.js","webpack://utils/./src/index.js"],"names":["FIELD_TYPE","DATE","FILE","ID","NUMBER","RELATION","SWITCH","TEXT","SMART","SWITCH_FORMATS","ON_OFF","YES_NO","TRUE_FALSE","ACTIVE_INACTIVE","HIGH_LOW","TEXT_FORMATS","UNFORMATTED","NAME","ADDRESS","SSN","EIN","PHONE","EMAIL","NUMBER_FORMATS","CURRENCY","PERCENTAGE","FRACTION","SCIENTIFIC","FILE_FORMATS","IMAGE","DATE_FORMATS","DATETIME","MUTATION_TYPE","CREATE","UPDATE","SYSTEM_TABLES","USERS","FILES","SETTINGS","ROLES","INVITATIONS","PERMISSIONS","API_TOKENS","ENVIRONMENT_VARIABLES","getFieldSchemaByName","fieldName","tableSchema","R","fields","getTableSchemaByName","tableName","schema","getTableSchemaById","id","isFileField","isListField","isMetaField","isRelationField","formatFieldDataListItem","type","fieldSchema","data","nextData","relationTableSchema","relation","refTable","Error","formatDataForMutation","name","formatFieldDataList","item","formatFieldData","formatFieldDataForMutation","options","formatedData","result","skip","formatedFieldData","length","mutate","formatDataAfterQuery","items","map"],"mappings":"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","file":"utils.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ramda\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [\"ramda\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory(require(\"ramda\"));\n\telse\n\t\troot[\"utils\"] = factory(root[\"ramda\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","//@flow\n\nexport const FIELD_TYPE = {\n  DATE: 'DATE',\n  FILE: 'FILE',\n  ID: 'ID',\n  NUMBER: 'NUMBER',\n  RELATION: 'RELATION',\n  SWITCH: 'SWITCH',\n  TEXT: 'TEXT',\n  SMART: 'SMART',\n};\n\nexport const SWITCH_FORMATS = {\n  ON_OFF: 'ON_OFF',\n  YES_NO: 'YES_NO',\n  TRUE_FALSE: 'TRUE_FALSE',\n  ACTIVE_INACTIVE: 'ACTIVE_INACTIVE',\n  HIGH_LOW: 'HIGH_LOW',\n  SMART: 'SMART',\n};\n\nexport const TEXT_FORMATS = {\n  UNFORMATTED: 'UNFORMATTED',\n  NAME: 'NAME',\n  ADDRESS: 'ADDRESS',\n  SSN: 'SSN',\n  EIN: 'EIN',\n  PHONE: 'PHONE',\n  EMAIL: 'EMAIL',\n};\n\nexport const NUMBER_FORMATS = {\n  NUMBER: 'NUMBER',\n  CURRENCY: 'CURRENCY',\n  PERCENTAGE: 'PERCENTAGE',\n  FRACTION: 'FRACTION',\n  SCIENTIFIC: 'SCIENTIFIC',\n};\n\nexport const FILE_FORMATS = {\n  FILE: 'FILE',\n  IMAGE: 'IMAGE',\n};\n\nexport const DATE_FORMATS = {\n  DATE: 'DATE',\n  DATETIME: 'DATE/TIME',\n};\n\nexport const MUTATION_TYPE = {\n  CREATE: 'CREATE',\n  UPDATE: 'UPDATE',\n};\n\nexport const SYSTEM_TABLES = {\n  USERS: 'Users',\n  FILES: 'Files',\n  SETTINGS: 'Settings',\n  ROLES: 'Roles',\n  INVITATIONS: 'Invitations',\n  PERMISSIONS: 'Permissions',\n  API_TOKENS: 'ApiTokens',\n  ENVIRONMENT_VARIABLES: 'EnvironmentVariables',\n};\n","//@flow\nimport * as R from 'ramda';\n\nimport type { FieldSchema, TableSchema } from '../types';\n\nconst getFieldSchemaByName = (fieldName: string, tableSchema: TableSchema): ?FieldSchema => R.find(\n  R.propEq('name', fieldName),\n  tableSchema.fields,\n);\n\nexport { getFieldSchemaByName };\n","//@flow\nimport * as R from 'ramda';\n\nimport type { TableSchema, Schema } from '../types';\n\nconst getTableSchemaByName = (tableName: string, schema: Schema): ?TableSchema => R.find(\n  R.propEq('name', tableName),\n  schema,\n);\n\nexport { getTableSchemaByName };\n","//@flow\nimport * as R from 'ramda';\n\nimport type { TableSchema, Schema } from '../types';\n\nconst getTableSchemaById = (id: string, schema: Schema): ?TableSchema => R.find(\n  R.propEq('id', id),\n  schema,\n);\n\nexport { getTableSchemaById };\n","export { getFieldSchemaByName } from './getFieldSchemaByName';\nexport { getTableSchemaByName } from './getTableSchemaByName';\nexport { getTableSchemaById } from './getTableSchemaById';\n","//@flow\nimport * as R from 'ramda';\n\nimport { FIELD_TYPE } from '../constants';\nimport type { FieldSchema } from '../types';\n\nconst isFileField: (FieldSchema) => boolean = R.propEq('fieldType', FIELD_TYPE.FILE);\n\nexport { isFileField };\n","//@flow\nimport * as R from 'ramda';\n\nimport type { FieldSchema } from '../types';\n\nconst isListField: (FieldSchema) => boolean = R.propEq('isList', true);\n\nexport { isListField };\n","//@flow\nimport * as R from 'ramda';\n\nimport type { FieldSchema } from '../types';\n\nconst isMetaField: (FieldSchema) => boolean = R.propEq('isMeta', true);\n\nexport { isMetaField };\n","//@flow\nimport * as R from 'ramda';\n\nimport { FIELD_TYPE } from '../constants';\nimport type { FieldSchema } from '../types';\n\nconst isRelationField: (FieldSchema) => boolean = R.propEq('fieldType', FIELD_TYPE.RELATION);\n\nexport { isRelationField };\n","export { isFileField } from './isFileField';\nexport { isListField } from './isListField';\nexport { isMetaField } from './isMetaField';\nexport { isRelationField } from './isRelationField';\n","//@flow\nimport * as R from 'ramda';\n\nimport { isRelationField } from '../verifiers';\nimport { getTableSchemaById } from '../selectors';\nimport { MUTATION_TYPE } from '../constants';\nimport { formatDataForMutation } from './formatDataForMutation';\n\nimport type { MutationType, FieldSchema, Schema, TableSchema } from '../types';\n\nexport const formatFieldDataListItem = (type: MutationType, fieldSchema: FieldSchema, data: any, schema: Schema) => {\n  let nextData = data;\n\n  if (R.isNil(nextData)) {\n    return {\n      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',\n      data: {},\n    };\n  } else if (typeof nextData === 'string') {\n    return {\n      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',\n      data: { id: nextData },\n    };\n  } else if (typeof nextData.id === 'string') {\n    return {\n      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',\n      data: { id: nextData.id },\n    };\n  }\n\n  if (isRelationField(fieldSchema)) {\n    const relationTableSchema: ?TableSchema = getTableSchemaById(fieldSchema.relation.refTable.id, schema);\n\n    if (!relationTableSchema) {\n      throw new Error(`Relation table schema with ${fieldSchema.relation.refTable.id} id not found in schema.`);\n    }\n\n    nextData = formatDataForMutation(type, relationTableSchema.name, nextData, schema);\n  }\n\n  return {\n    type: 'create',\n    data: nextData,\n  };\n};\n","//@flow\nimport * as R from 'ramda';\n\nimport { MUTATION_TYPE } from '../constants';\nimport { formatFieldDataListItem } from './formatFieldDataListItem';\n\nimport type { MutationType, FieldSchema, Schema } from '../types';\n\nexport const formatFieldDataList = (type: MutationType, fieldSchema: FieldSchema, data: any, schema: Schema) => R.pipe(\n  R.map((item) => formatFieldDataListItem(type, fieldSchema, item, schema)),\n  R.groupBy(R.prop('type')),\n  R.mapObjIndexed(R.map(R.prop('data'))),\n  R.when(\n    R.allPass([\n      R.complement(R.has('reconnect')),\n      R.always(R.equals(type, MUTATION_TYPE.UPDATE)),\n    ]),\n    R.assoc('reconnect', []),\n  ),\n)(data);\n","//@flow\nimport { formatFieldDataListItem } from './formatFieldDataListItem';\n\nimport type { MutationType, FieldSchema, Schema } from '../types';\n\nexport const formatFieldData = (type: MutationType, fieldSchema: FieldSchema, data: any, schema: Schema) => {\n  const nextData = formatFieldDataListItem(type, fieldSchema, data, schema);\n\n  return {\n    [nextData.type]: nextData.data,\n  };\n};\n","//@flow\nimport { isListField, isFileField, isRelationField } from '../verifiers';\nimport { formatFieldDataList } from './formatFieldDataList';\nimport { formatFieldData } from './formatFieldData';\n\nimport type { MutationType, FieldSchema, Schema } from '../types';\n\nconst formatFieldDataForMutation = (type: MutationType, fieldSchema: FieldSchema, data: any, schema: Schema) => {\n  let nextData = data;\n\n  if (isFileField(fieldSchema) || isRelationField(fieldSchema)) {\n    if (isListField(fieldSchema)) {\n      nextData = formatFieldDataList(type, fieldSchema, data, schema);\n    } else {\n      nextData = formatFieldData(type, fieldSchema, data, schema);\n    }\n  }\n\n  return nextData;\n};\n\nexport { formatFieldDataForMutation };\n","//@flow\nimport * as R from 'ramda';\n\nimport { MUTATION_TYPE } from '../constants';\nimport { getFieldSchemaByName, getTableSchemaByName } from '../selectors';\nimport { isMetaField, isFileField, isRelationField, isListField } from '../verifiers';\nimport { formatFieldDataForMutation } from './formatFieldDataForMutation';\n\nimport type { MutationType, FieldSchema, TableSchema, Schema } from '../types';\n/**\n\n * Formats entity data for create or update mutation based on passed schema.\n * @param {MutationType} type - The type of the mutation.\n * @param {string} tableName - The name of the table from the 8base API.\n * @param {Object} data - The entity data for format.\n * @param {Schema} schema - The schema of the used tables from the 8base API.\n */\nconst formatDataForMutation = (type: MutationType, tableName: string, data: any, schema: Schema, options: Object = {}) => {\n  if (R.not(type in MUTATION_TYPE)) {\n    throw new Error(`Invalid mutation type: ${type}`);\n  }\n\n  if (R.isNil(data)) {\n    return data;\n  }\n\n  const tableSchema: ?TableSchema = getTableSchemaByName(tableName, schema);\n\n  if (!tableSchema) {\n    throw new Error(`Table schema with ${tableName} name not found in schema.`);\n  }\n\n  const formatedData = R.reduce((result: Object, fieldName: string) => {\n    if (fieldName === '_description' || fieldName === '__typename') {\n      return result;\n    }\n\n    const fieldSchema: ?FieldSchema = getFieldSchemaByName(fieldName, tableSchema);\n\n    if (!fieldSchema) {\n      // throw new Error(`Field schema with ${fieldName} name not found in table schema with ${tableSchema.name} name.`);\n      return result;\n    }\n\n    const { skip } = options;\n\n    if (typeof skip === 'function' && skip(data[fieldName], fieldSchema)) {\n      return result;\n    }\n\n    if (isMetaField(fieldSchema)) {\n      return result;\n    }\n\n    let formatedFieldData = data[fieldName];\n\n    if ((isFileField(fieldSchema) || isRelationField(fieldSchema)) && isListField(fieldSchema)) {\n      if (R.isNil(formatedFieldData)) {\n        formatedFieldData = [];\n      } else {\n        formatedFieldData = R.reject(R.isNil, formatedFieldData);\n      }\n\n      if (formatedFieldData.length === 0 && type === MUTATION_TYPE.CREATE) {\n        return result;\n      }\n    }\n\n    formatedFieldData = formatFieldDataForMutation(type, fieldSchema, formatedFieldData, schema);\n\n    const { mutate } = options;\n\n    if (typeof mutate === 'function') {\n      formatedFieldData = mutate(formatedFieldData, data[fieldName], fieldSchema);\n    }\n\n    return {\n      ...result,\n      [fieldName]: formatedFieldData,\n    };\n  }, {}, R.keys(data));\n\n  return formatedData;\n};\n\nexport { formatDataForMutation };\n","//@flow\nimport * as R from 'ramda';\n\nimport { getFieldSchemaByName, getTableSchemaByName } from '../selectors';\nimport { isRelationField, isFileField, isListField, isMetaField } from '../verifiers';\n\nimport type { FieldSchema, TableSchema, Schema } from '../types';\n\n/**\n * Remove unnecessary data after fetch entity data by query\n * @param {string} tableName - The name of the table from the 8base API.\n * @param {Object} data - The entity data for format.\n * @param {Schema} schema - The schema of the used tables from the 8base API.\n */\nconst formatDataAfterQuery = (tableName: string, data: Object, schema: Schema) => {\n  const tableSchema: ?TableSchema = getTableSchemaByName(tableName, schema);\n\n  if (!tableSchema) {\n    throw new Error(`Table schema with ${tableName} name not found in schema.`);\n  }\n\n  const formatedData = R.reduce((result: Object, fieldName: string) => {\n    const fieldSchema: ?FieldSchema = getFieldSchemaByName(fieldName, tableSchema);\n\n    if (!fieldSchema) {\n      return result;\n    }\n\n    if ((isRelationField(fieldSchema) || isFileField(fieldSchema)) && isListField(fieldSchema)) {\n      if (data[fieldName]) {\n        result = R.assoc(fieldName, data[fieldName].items, result);\n      }\n    } else if (!isMetaField(fieldSchema)) {\n      result = R.assoc(fieldName, data[fieldName], result);\n    }\n\n    if (isRelationField(fieldSchema) && !isFileField(fieldSchema) && result[fieldName]) {\n      if (isListField(fieldSchema)) {\n        result = R.assoc(fieldName, result[fieldName].map(({ id }) => id), result);\n      } else {\n        result = R.assoc(fieldName, result[fieldName].id, result);\n      }\n    }\n\n    return result;\n  }, {}, R.keys(data));\n\n  return formatedData;\n};\n\nexport { formatDataAfterQuery };\n","export { formatDataForMutation } from './formatDataForMutation';\nexport { formatDataAfterQuery } from './formatDataAfterQuery';\n","export * from './constants';\nexport * from './formatters';\nexport * from './selectors';\nexport * from './verifiers';\n"],"sourceRoot":""}