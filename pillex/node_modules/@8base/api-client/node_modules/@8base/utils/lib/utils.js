(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("ramda"));
	else if(typeof define === 'function' && define.amd)
		define("utils", ["ramda"], factory);
	else if(typeof exports === 'object')
		exports["utils"] = factory(require("ramda"));
	else
		root["utils"] = factory(root["ramda"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__0__;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/constants.js
var FIELD_TYPE = {
  DATE: 'DATE',
  FILE: 'FILE',
  ID: 'ID',
  NUMBER: 'NUMBER',
  RELATION: 'RELATION',
  SWITCH: 'SWITCH',
  TEXT: 'TEXT',
  SMART: 'SMART'
};

var SWITCH_FORMATS = {
  ON_OFF: 'ON_OFF',
  YES_NO: 'YES_NO',
  TRUE_FALSE: 'TRUE_FALSE',
  ACTIVE_INACTIVE: 'ACTIVE_INACTIVE',
  HIGH_LOW: 'HIGH_LOW',
  SMART: 'SMART'
};

var TEXT_FORMATS = {
  UNFORMATTED: 'UNFORMATTED',
  NAME: 'NAME',
  ADDRESS: 'ADDRESS',
  SSN: 'SSN',
  EIN: 'EIN',
  PHONE: 'PHONE',
  EMAIL: 'EMAIL'
};

var NUMBER_FORMATS = {
  NUMBER: 'NUMBER',
  CURRENCY: 'CURRENCY',
  PERCENTAGE: 'PERCENTAGE',
  FRACTION: 'FRACTION',
  SCIENTIFIC: 'SCIENTIFIC'
};

var FILE_FORMATS = {
  FILE: 'FILE',
  IMAGE: 'IMAGE'
};

var DATE_FORMATS = {
  DATE: 'DATE',
  DATETIME: 'DATE/TIME'
};

var MUTATION_TYPE = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE'
};

var SYSTEM_TABLES = {
  USERS: 'Users',
  FILES: 'Files',
  SETTINGS: 'Settings',
  ROLES: 'Roles',
  INVITATIONS: 'Invitations',
  PERMISSIONS: 'Permissions',
  API_TOKENS: 'ApiTokens',
  ENVIRONMENT_VARIABLES: 'EnvironmentVariables'
};
// EXTERNAL MODULE: external "ramda"
var external_ramda_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/selectors/getFieldSchemaByName.js


var getFieldSchemaByName_getFieldSchemaByName = function getFieldSchemaByName(fieldName, tableSchema) {
  return external_ramda_["find"](external_ramda_["propEq"]('name', fieldName), tableSchema.fields);
};


// CONCATENATED MODULE: ./src/selectors/getTableSchemaByName.js


var getTableSchemaByName_getTableSchemaByName = function getTableSchemaByName(tableName, schema) {
  return external_ramda_["find"](external_ramda_["propEq"]('name', tableName), schema);
};


// CONCATENATED MODULE: ./src/selectors/getTableSchemaById.js


var getTableSchemaById_getTableSchemaById = function getTableSchemaById(id, schema) {
  return external_ramda_["find"](external_ramda_["propEq"]('id', id), schema);
};


// CONCATENATED MODULE: ./src/selectors/index.js



// CONCATENATED MODULE: ./src/verifiers/isFileField.js





var isFileField = external_ramda_["propEq"]('fieldType', FIELD_TYPE.FILE);


// CONCATENATED MODULE: ./src/verifiers/isListField.js


var isListField = external_ramda_["propEq"]('isList', true);


// CONCATENATED MODULE: ./src/verifiers/isMetaField.js


var isMetaField = external_ramda_["propEq"]('isMeta', true);


// CONCATENATED MODULE: ./src/verifiers/isRelationField.js





var isRelationField = external_ramda_["propEq"]('fieldType', FIELD_TYPE.RELATION);


// CONCATENATED MODULE: ./src/verifiers/index.js




// CONCATENATED MODULE: ./src/formatters/formatFieldDataListItem.js







var formatFieldDataListItem_formatFieldDataListItem = function formatFieldDataListItem(type, fieldSchema, data, schema) {
  var nextData = data;

  if (external_ramda_["isNil"](nextData)) {
    return {
      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: {}
    };
  } else if (typeof nextData === 'string') {
    return {
      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: { id: nextData }
    };
  } else if (typeof nextData.id === 'string') {
    return {
      type: type === MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
      data: { id: nextData.id }
    };
  }

  if (isRelationField(fieldSchema)) {
    var relationTableSchema = getTableSchemaById_getTableSchemaById(fieldSchema.relation.refTable.id, schema);

    if (!relationTableSchema) {
      throw new Error('Relation table schema with ' + fieldSchema.relation.refTable.id + ' id not found in schema.');
    }

    nextData = formatDataForMutation_formatDataForMutation(type, relationTableSchema.name, nextData, schema);
  }

  return {
    type: 'create',
    data: nextData
  };
};
// CONCATENATED MODULE: ./src/formatters/formatFieldDataList.js





var formatFieldDataList_formatFieldDataList = function formatFieldDataList(type, fieldSchema, data, schema) {
  return external_ramda_["pipe"](external_ramda_["map"](function (item) {
    return formatFieldDataListItem_formatFieldDataListItem(type, fieldSchema, item, schema);
  }), external_ramda_["groupBy"](external_ramda_["prop"]('type')), external_ramda_["mapObjIndexed"](external_ramda_["map"](external_ramda_["prop"]('data'))), external_ramda_["when"](external_ramda_["allPass"]([external_ramda_["complement"](external_ramda_["has"]('reconnect')), external_ramda_["always"](external_ramda_["equals"](type, MUTATION_TYPE.UPDATE))]), external_ramda_["assoc"]('reconnect', [])))(data);
};
// CONCATENATED MODULE: ./src/formatters/formatFieldData.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var formatFieldData_formatFieldData = function formatFieldData(type, fieldSchema, data, schema) {
  var nextData = formatFieldDataListItem_formatFieldDataListItem(type, fieldSchema, data, schema);

  return _defineProperty({}, nextData.type, nextData.data);
};
// CONCATENATED MODULE: ./src/formatters/formatFieldDataForMutation.js




var formatFieldDataForMutation_formatFieldDataForMutation = function formatFieldDataForMutation(type, fieldSchema, data, schema) {
  var nextData = data;

  if (isFileField(fieldSchema) || isRelationField(fieldSchema)) {
    if (isListField(fieldSchema)) {
      nextData = formatFieldDataList_formatFieldDataList(type, fieldSchema, data, schema);
    } else {
      nextData = formatFieldData_formatFieldData(type, fieldSchema, data, schema);
    }
  }

  return nextData;
};


// CONCATENATED MODULE: ./src/formatters/formatDataForMutation.js
function formatDataForMutation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








/**

 * Formats entity data for create or update mutation based on passed schema.
 * @param {MutationType} type - The type of the mutation.
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 */
var formatDataForMutation_formatDataForMutation = function formatDataForMutation(type, tableName, data, schema) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  if (external_ramda_["not"](type in MUTATION_TYPE)) {
    throw new Error('Invalid mutation type: ' + type);
  }

  if (external_ramda_["isNil"](data)) {
    return data;
  }

  var tableSchema = getTableSchemaByName_getTableSchemaByName(tableName, schema);

  if (!tableSchema) {
    throw new Error('Table schema with ' + tableName + ' name not found in schema.');
  }

  var formatedData = external_ramda_["reduce"](function (result, fieldName) {
    if (fieldName === '_description' || fieldName === '__typename') {
      return result;
    }

    var fieldSchema = getFieldSchemaByName_getFieldSchemaByName(fieldName, tableSchema);

    if (!fieldSchema) {
      // throw new Error(`Field schema with ${fieldName} name not found in table schema with ${tableSchema.name} name.`);
      return result;
    }

    var skip = options.skip;


    if (typeof skip === 'function' && skip(data[fieldName], fieldSchema)) {
      return result;
    }

    if (isMetaField(fieldSchema)) {
      return result;
    }

    var formatedFieldData = data[fieldName];

    if ((isFileField(fieldSchema) || isRelationField(fieldSchema)) && isListField(fieldSchema)) {
      if (external_ramda_["isNil"](formatedFieldData)) {
        formatedFieldData = [];
      } else {
        formatedFieldData = external_ramda_["reject"](external_ramda_["isNil"], formatedFieldData);
      }

      if (formatedFieldData.length === 0 && type === MUTATION_TYPE.CREATE) {
        return result;
      }
    }

    formatedFieldData = formatFieldDataForMutation_formatFieldDataForMutation(type, fieldSchema, formatedFieldData, schema);

    var mutate = options.mutate;


    if (typeof mutate === 'function') {
      formatedFieldData = mutate(formatedFieldData, data[fieldName], fieldSchema);
    }

    return Object.assign({}, result, formatDataForMutation_defineProperty({}, fieldName, formatedFieldData));
  }, {}, external_ramda_["keys"](data));

  return formatedData;
};


// CONCATENATED MODULE: ./src/formatters/formatDataAfterQuery.js





/**
 * Remove unnecessary data after fetch entity data by query
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 */
var formatDataAfterQuery_formatDataAfterQuery = function formatDataAfterQuery(tableName, data, schema) {
  var tableSchema = getTableSchemaByName_getTableSchemaByName(tableName, schema);

  if (!tableSchema) {
    throw new Error('Table schema with ' + tableName + ' name not found in schema.');
  }

  var formatedData = external_ramda_["reduce"](function (result, fieldName) {
    var fieldSchema = getFieldSchemaByName_getFieldSchemaByName(fieldName, tableSchema);

    if (!fieldSchema) {
      return result;
    }

    if ((isRelationField(fieldSchema) || isFileField(fieldSchema)) && isListField(fieldSchema)) {
      if (data[fieldName]) {
        result = external_ramda_["assoc"](fieldName, data[fieldName].items, result);
      }
    } else if (!isMetaField(fieldSchema)) {
      result = external_ramda_["assoc"](fieldName, data[fieldName], result);
    }

    if (isRelationField(fieldSchema) && !isFileField(fieldSchema) && result[fieldName]) {
      if (isListField(fieldSchema)) {
        result = external_ramda_["assoc"](fieldName, result[fieldName].map(function (_ref) {
          var id = _ref.id;
          return id;
        }), result);
      } else {
        result = external_ramda_["assoc"](fieldName, result[fieldName].id, result);
      }
    }

    return result;
  }, {}, external_ramda_["keys"](data));

  return formatedData;
};


// CONCATENATED MODULE: ./src/formatters/index.js


// CONCATENATED MODULE: ./src/index.js
/* concated harmony reexport FIELD_TYPE */__webpack_require__.d(__webpack_exports__, "FIELD_TYPE", function() { return FIELD_TYPE; });
/* concated harmony reexport SWITCH_FORMATS */__webpack_require__.d(__webpack_exports__, "SWITCH_FORMATS", function() { return SWITCH_FORMATS; });
/* concated harmony reexport TEXT_FORMATS */__webpack_require__.d(__webpack_exports__, "TEXT_FORMATS", function() { return TEXT_FORMATS; });
/* concated harmony reexport NUMBER_FORMATS */__webpack_require__.d(__webpack_exports__, "NUMBER_FORMATS", function() { return NUMBER_FORMATS; });
/* concated harmony reexport FILE_FORMATS */__webpack_require__.d(__webpack_exports__, "FILE_FORMATS", function() { return FILE_FORMATS; });
/* concated harmony reexport DATE_FORMATS */__webpack_require__.d(__webpack_exports__, "DATE_FORMATS", function() { return DATE_FORMATS; });
/* concated harmony reexport MUTATION_TYPE */__webpack_require__.d(__webpack_exports__, "MUTATION_TYPE", function() { return MUTATION_TYPE; });
/* concated harmony reexport SYSTEM_TABLES */__webpack_require__.d(__webpack_exports__, "SYSTEM_TABLES", function() { return SYSTEM_TABLES; });
/* concated harmony reexport formatDataForMutation */__webpack_require__.d(__webpack_exports__, "formatDataForMutation", function() { return formatDataForMutation_formatDataForMutation; });
/* concated harmony reexport formatDataAfterQuery */__webpack_require__.d(__webpack_exports__, "formatDataAfterQuery", function() { return formatDataAfterQuery_formatDataAfterQuery; });
/* concated harmony reexport getFieldSchemaByName */__webpack_require__.d(__webpack_exports__, "getFieldSchemaByName", function() { return getFieldSchemaByName_getFieldSchemaByName; });
/* concated harmony reexport getTableSchemaByName */__webpack_require__.d(__webpack_exports__, "getTableSchemaByName", function() { return getTableSchemaByName_getTableSchemaByName; });
/* concated harmony reexport getTableSchemaById */__webpack_require__.d(__webpack_exports__, "getTableSchemaById", function() { return getTableSchemaById_getTableSchemaById; });
/* concated harmony reexport isFileField */__webpack_require__.d(__webpack_exports__, "isFileField", function() { return isFileField; });
/* concated harmony reexport isListField */__webpack_require__.d(__webpack_exports__, "isListField", function() { return isListField; });
/* concated harmony reexport isMetaField */__webpack_require__.d(__webpack_exports__, "isMetaField", function() { return isMetaField; });
/* concated harmony reexport isRelationField */__webpack_require__.d(__webpack_exports__, "isRelationField", function() { return isRelationField; });





/***/ })
/******/ ]);
});
//# sourceMappingURL=utils.js.map