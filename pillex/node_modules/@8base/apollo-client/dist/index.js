"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "gql", {
  enumerable: true,
  get: function get() {
    return _graphqlTag.default;
  }
});
Object.defineProperty(exports, "InMemoryCache", {
  enumerable: true,
  get: function get() {
    return _apolloCacheInmemory.InMemoryCache;
  }
});
exports.EightBaseApolloClient = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var _apolloClient = require("apollo-client");

var _apolloCacheInmemory = require("apollo-cache-inmemory");

var _apolloLink = require("apollo-link");

var _apolloLinkBatchHttp = require("apollo-link-batch-http");

var _apolloLinks = require("@8base/apollo-links");

var _apolloLinkError = require("apollo-link-error");

/**
 * Extended Apollo Client by 8base several links.
 *
 * @param {Object} config - The Apollo Client config.
 * @param {string} config.uri Endpoint of the GraphQl server.
 * @param {Function} config.getAuthState - The function which are using to get auth state.
 * @param {Function} config.getRefreshTokenParameters - The function which are using for get refresh token parameters.
 * @param {Function} config.onAuthSuccess - The callback which called when attempt to refresh authentication is success.
 * @param {Function} [config.onAuthError] - The callback which called when attempt to refresh authentication is failed.
 * @param {Function} [config.onIdTokenExpired] - The callback which called when id token is expired.
 * @param {Function} [config.onRequestSuccess] - The callback which called when request is success.
 * @param {Function} [config.onRequestError] - The callback which called when request is fail.
 * @param {Function} [config.extendLinks] - Function to extend standart array of the links.
 *
 * @return instance of the Apollo Client
 */
var EightBaseApolloClient =
/*#__PURE__*/
function (_ApolloClient) {
  (0, _inherits2.default)(EightBaseApolloClient, _ApolloClient);

  function EightBaseApolloClient(config) {
    (0, _classCallCheck2.default)(this, EightBaseApolloClient);
    var uri = config.uri,
        getAuthState = config.getAuthState,
        getRefreshTokenParameters = config.getRefreshTokenParameters,
        onAuthSuccess = config.onAuthSuccess,
        onAuthError = config.onAuthError,
        onIdTokenExpired = config.onIdTokenExpired,
        onRequestSuccess = config.onRequestSuccess,
        onRequestError = config.onRequestError,
        extendLinks = config.extendLinks,
        rest = (0, _objectWithoutProperties2.default)(config, ["uri", "getAuthState", "getRefreshTokenParameters", "onAuthSuccess", "onAuthError", "onIdTokenExpired", "onRequestSuccess", "onRequestError", "extendLinks"]);
    var cache = config.cache;

    if (!cache) {
      cache = new _apolloCacheInmemory.InMemoryCache();
    }

    var authLink = new _apolloLinks.AuthLink({
      getAuthState: getAuthState,
      getRefreshTokenParameters: getRefreshTokenParameters,
      onAuthSuccess: onAuthSuccess,
      onAuthError: onAuthError,
      onIdTokenExpired: onIdTokenExpired
    });
    var batchHttpLink = new _apolloLinkBatchHttp.BatchHttpLink({
      uri: uri
    });
    var links = [authLink, batchHttpLink];

    if (typeof onRequestSuccess === 'function') {
      links = [new _apolloLinks.SuccessLink({
        successHandler: onRequestSuccess
      })].concat((0, _toConsumableArray2.default)(links));
    }

    if (typeof onRequestError === 'function') {
      links = [(0, _apolloLinkError.onError)(onRequestError)].concat((0, _toConsumableArray2.default)(links));
    }

    if (typeof extendLinks === 'function') {
      links = extendLinks(links);
    }

    var link = _apolloLink.ApolloLink.from(links);

    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EightBaseApolloClient).call(this, (0, _objectSpread2.default)({
      cache: cache,
      link: link
    }, rest)));
  }

  return EightBaseApolloClient;
}(_apolloClient.ApolloClient);

exports.EightBaseApolloClient = EightBaseApolloClient;