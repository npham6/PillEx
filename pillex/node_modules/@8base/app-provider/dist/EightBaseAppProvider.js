"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EightBaseAppProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _tableSchemaProvider = require("@8base/table-schema-provider");

var _auth = require("@8base/auth");

var _ApolloContainer = require("./ApolloContainer");

/**
 * `EightBaseAppProvider` universal provider which loads fragments schema and provides Apollo client with it, authentication and table schema.
 * @prop {string} [uri] - The 8base API field schema.
 * @prop {Object} [authClient] - The 8base auth client.
 * @prop {Function} [onRequestSuccess] - The callback which called when request is success.
 * @prop {Function} [onRequestError] - The callback which called when request is fail.
 * @prop {Function} [extendLinks] - Function to extend standart array of the links.
 * @prop {Function} [children] - The render function.
 */
var EightBaseAppProvider = function EightBaseAppProvider(_ref) {
  var uri = _ref.uri,
      authClient = _ref.authClient,
      onRequestSuccess = _ref.onRequestSuccess,
      onRequestError = _ref.onRequestError,
      extendLinks = _ref.extendLinks,
      children = _ref.children;
  return _react.default.createElement(_auth.AuthProvider, {
    authClient: authClient
  }, _react.default.createElement(_ApolloContainer.ApolloContainer, {
    uri: uri,
    extendLinks: extendLinks,
    onRequestSuccess: onRequestSuccess,
    onRequestError: onRequestError
  }, _react.default.createElement(_tableSchemaProvider.TableSchemaProvider, null, children)));
};

exports.EightBaseAppProvider = EightBaseAppProvider;