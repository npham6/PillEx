"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FragmentsSchemaContainer = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var R = _interopRequireWildcard(require("ramda"));

var FragmentsSchemaContainer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(FragmentsSchemaContainer, _React$Component);

  function FragmentsSchemaContainer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, FragmentsSchemaContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FragmentsSchemaContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      loading: true,
      fragmentsSchema: null
    });
    return _this;
  }

  (0, _createClass2.default)(FragmentsSchemaContainer, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        var uri, fragmentsSchema;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                uri = this.props.uri;
                this.setState({
                  loading: true
                });
                _context.next = 4;
                return fetchFragmentsSchema(uri);

              case 4:
                fragmentsSchema = _context.sent;
                this.setState({
                  loading: false,
                  fragmentsSchema: fragmentsSchema
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          loading = _this$state.loading,
          fragmentsSchema = _this$state.fragmentsSchema;
      var children = this.props.children;
      return children({
        loading: loading,
        fragmentsSchema: fragmentsSchema
      });
    }
  }]);
  return FragmentsSchemaContainer;
}(_react.default.Component);

exports.FragmentsSchemaContainer = FragmentsSchemaContainer;

var fetchFragmentsSchema =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(uri) {
    var result, filteredData;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fetch(uri, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                operationName: 'FragmentsSchema',
                query: "\n        query FragmentsSchema {\n          __schema {\n            types {\n              kind\n              name\n              possibleTypes {\n                name\n              }\n            }\n          }\n        }\n      "
              })
            }).then(function (result) {
              return result.json();
            }).catch(function () {
              return {
                data: null
              };
            });

          case 2:
            result = _context2.sent;

            if (!R.isNil(result.data)) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", null);

          case 5:
            filteredData = result.data.__schema.types.filter(function (type) {
              return type.possibleTypes !== null;
            });
            result.data.__schema.types = filteredData;
            return _context2.abrupt("return", result.data);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function fetchFragmentsSchema(_x) {
    return _ref.apply(this, arguments);
  };
}();