"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloContainer = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var R = _interopRequireWildcard(require("ramda"));

var _reactApollo = require("react-apollo");

var _apolloClient = require("@8base/apollo-client");

var _apolloCacheInmemory = require("apollo-cache-inmemory");

var _auth = require("@8base/auth");

var _FragmentsSchemaContainer = require("./FragmentsSchemaContainer");

var ApolloContainer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ApolloContainer, _React$Component);

  function ApolloContainer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ApolloContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ApolloContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onIdTokenExpired",
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var _this$props$auth, setAuthState, renewToken, _ref2, idToken;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$props$auth = _this.props.auth, setAuthState = _this$props$auth.setAuthState, renewToken = _this$props$auth.renewToken;
              _context.next = 3;
              return renewToken({});

            case 3:
              _ref2 = _context.sent;
              idToken = _ref2.idToken;
              _context.next = 7;
              return setAuthState({
                token: idToken
              });

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onAuthError",
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      var _this$props$auth2, purgeAuthState, logout;

      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this$props$auth2 = _this.props.auth, purgeAuthState = _this$props$auth2.purgeAuthState, logout = _this$props$auth2.logout;
              _context2.next = 3;
              return purgeAuthState();

            case 3:
              if (!(typeof logout === 'function')) {
                _context2.next = 6;
                break;
              }

              _context2.next = 6;
              return logout();

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getAuthState", function () {
      var authState = _this.props.auth.authState;

      if (authState) {
        return R.pick(['token', 'workspaceId'])(authState);
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "createClient", R.memoize(function (fragmentsSchema) {
      return new _apolloClient.EightBaseApolloClient({
        getAuthState: _this.getAuthState,
        getRefreshTokenParameters: _this.getRefreshTokenParameters,
        onAuthError: _this.onAuthError,
        uri: _this.props.uri,
        extendLinks: _this.props.extendLinks,
        onRequestSuccess: _this.props.onRequestSuccess,
        onRequestError: _this.props.onRequestError,
        cache: new _apolloCacheInmemory.InMemoryCache({
          fragmentMatcher: new _apolloCacheInmemory.IntrospectionFragmentMatcher({
            introspectionQueryResultData: fragmentsSchema
          })
        })
      });
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderContent", function (_ref4) {
      var loading = _ref4.loading,
          fragmentsSchema = _ref4.fragmentsSchema;

      if (loading) {
        return null;
      }

      _this.client = _this.createClient(fragmentsSchema);
      return _react.default.createElement(_reactApollo.ApolloProvider, {
        client: _this.client
      }, _this.props.children);
    });
    return _this;
  }

  (0, _createClass2.default)(ApolloContainer, [{
    key: "render",
    value: function render() {
      var uri = this.props.uri;
      return _react.default.createElement(_FragmentsSchemaContainer.FragmentsSchemaContainer, {
        uri: uri
      }, this.renderContent);
    }
  }]);
  return ApolloContainer;
}(_react.default.Component);

exports.ApolloContainer = ApolloContainer;
exports.ApolloContainer = ApolloContainer = (0, _auth.withAuth)(ApolloContainer);