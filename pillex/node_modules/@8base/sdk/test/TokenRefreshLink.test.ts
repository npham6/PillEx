import * as errorCodes from "@8base/error-codes";
import { ApolloLink, execute, Observable } from "apollo-link";
import TokenRefreshLink from "../src/TokenRefreshLink";
import gql from "graphql-tag";

describe("refresh token link", () => {

  const setRefreshTokenInputMock = jest.fn(() => {
    return {
      email: "test-email",
      refreshToken: "refresh-token"
    };
  });
  const authReceived = jest.fn();
  const authFailed = jest.fn();
  const tokenRefreshLink = new TokenRefreshLink({
    setRefreshTokenInput: setRefreshTokenInputMock,
    authReceived: authReceived,
    authFailed: authFailed,
  });

  const query = gql`
    mutation {
      sample {
        id
      }
    }
  `;


  test("main success scenario", (done) => {

    const stub = jest.fn();

    stub.mockReturnValueOnce(Observable.of({
      errors: [{
        code: errorCodes.TokenExpiredErrorCode
      }],
      data: null
    }));
    stub.mockReturnValueOnce(Observable.of({
      data: {
        userRefreshToken: {
          refreshToken: "new-refresh-token",
          idToken: "new-id-token"
        }
      }
    }));
    stub.mockReturnValueOnce(Observable.of({
      data: {
        success: true
      }
    }));


    const link = ApolloLink.from(<any>[
      tokenRefreshLink, stub
    ]);

    execute(link, { query }).subscribe(
      () => {
      },
      (error) => {
        fail();
      },
      () => {
        expect(setRefreshTokenInputMock).toHaveBeenCalledTimes(1);
        expect(authReceived).toHaveBeenCalledTimes(1);
        expect(authReceived.mock.calls[0][0].idToken).toBe("new-id-token");
        expect(authReceived.mock.calls[0][0].refreshToken).toBe("new-refresh-token");

        expect(stub).toHaveBeenCalledTimes(3);

        done();
      },
    );
  });

  test("refresh token error", (done) => {

    const stub = jest.fn();

    stub.mockReturnValueOnce(Observable.of({
      errors: [{
        code: errorCodes.TokenExpiredErrorCode
      }],
      data: null
    }));
    stub.mockReturnValueOnce(Observable.of({
      errors: [{
        code: errorCodes.InvalidTokenErrorCode,
        message: "Invalid Refresh Token"
      }],
      data: {
        userRefreshToken: null
      }
    }));

    const link = ApolloLink.from(<any>[
      tokenRefreshLink, stub
    ]);

    execute(link, { query }).subscribe(
      () => {
        fail();
      },
      (error) => {
        expect(stub).toHaveBeenCalledTimes(2);
        done();
      },
      () => {
        fail();
      },
    );

    done();
  });
});
