import SchemaNameGenerator from '../src/SchemaNameGenerator';

describe('checking name generation', () => {
  test('generate names', async () => {
    expect.assertions(45);

    const appName = "AppName";
    const table1Name = 'Primitives';
    const table2Name = 'test';
    const relationName1 = 'NewRelation';
    const relationName2 = 'oldRelation';
    const typeName = 'PHONE';

    expect(SchemaNameGenerator.getTableItemFieldName(table1Name)).toBe('primitive');
    expect(SchemaNameGenerator.getTableItemFieldName(table2Name)).toBe('test');

    expect(SchemaNameGenerator.getTableListFieldName(table1Name)).toBe('primitivesList');
    expect(SchemaNameGenerator.getTableListFieldName(table2Name)).toBe('testsList');

    expect(SchemaNameGenerator.getCreateItemFieldName(table1Name)).toBe('primitiveCreate');
    expect(SchemaNameGenerator.getCreateItemFieldName(table2Name)).toBe('testCreate');

    expect(SchemaNameGenerator.getUpdateItemFieldName(table1Name)).toBe('primitiveUpdate');
    expect(SchemaNameGenerator.getUpdateItemFieldName(table2Name)).toBe('testUpdate');

    expect(SchemaNameGenerator.getDeleteItemFieldName(table1Name)).toBe('primitiveDelete');
    expect(SchemaNameGenerator.getDeleteItemFieldName(table2Name)).toBe('testDelete');

    expect(SchemaNameGenerator.getSmartTypeFieldName("testFields")).toBe("Testfield");

    expect(SchemaNameGenerator.getFilterInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveFilter');
    expect(SchemaNameGenerator.getFilterInputTypeName(table2Name, appName)).toBe('AppNameTestFilter');

    expect(SchemaNameGenerator.getOrderByInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveOrderBy');
    expect(SchemaNameGenerator.getOrderByInputTypeName(table2Name, appName)).toBe('AppNameTestOrderBy');

    expect(SchemaNameGenerator.getCreateInputName(table1Name, appName)).toBe("AppNamePrimitiveCreateInput");
    expect(SchemaNameGenerator.getCreateInputName(table2Name, appName)).toBe("AppNameTestCreateInput");

    expect(SchemaNameGenerator.getUpdateInputName(table1Name, appName)).toBe("AppNamePrimitiveUpdateInput");
    expect(SchemaNameGenerator.getUpdateInputName(table2Name, appName)).toBe("AppNameTestUpdateInput");

    expect(SchemaNameGenerator.getDeleteInputName(table1Name, appName)).toBe("AppNamePrimitiveDeleteInput");
    expect(SchemaNameGenerator.getDeleteInputName(table2Name, appName)).toBe("AppNameTestDeleteInput");

    expect(SchemaNameGenerator.getRelationTableFilter(table1Name, appName)).toBe("AppNamePrimitiveRelationFilter");
    expect(SchemaNameGenerator.getRelationTableFilter(table2Name, appName)).toBe("AppNameTestRelationFilter");
    expect(SchemaNameGenerator.makeTableType(table1Name, appName)).toBe("AppNamePrimitive");
    expect(SchemaNameGenerator.makeTableType(table2Name, appName)).toBe("AppNameTest");
    expect(SchemaNameGenerator.getSubscriptionFilterName(table1Name, appName)).toBe("AppNamePrimitiveSubscriptionFilter");
    expect(SchemaNameGenerator.getSubscriptionFilterName(table2Name, appName)).toBe("AppNameTestSubscriptionFilter");
    expect(SchemaNameGenerator.getSubscriptionPayload(table1Name, appName)).toBe("AppNamePrimitivePayload");
    expect(SchemaNameGenerator.getSubscriptionPayload(table2Name, appName)).toBe("AppNameTestPayload");

    expect(SchemaNameGenerator.getFieldsPermissionsInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveFieldsPermissions');
    expect(SchemaNameGenerator.getFieldsPermissionsInputTypeName(table2Name, appName)).toBe('AppNameTestFieldsPermissions');

    expect(SchemaNameGenerator.getEnumItemTypeName(table2Name, "testField", appName)).toBe("AppNameTest_TestFieldEnum");

    expect(SchemaNameGenerator.getTableListResponseTypeName(table1Name, appName)).toBe('AppNamePrimitiveListResponse');
    expect(SchemaNameGenerator.getTableListResponseTypeName(table2Name, appName)).toBe('AppNameTestListResponse');

    expect(SchemaNameGenerator.getRelationName(table1Name, relationName1, true, appName)).toBe('AppNamePrimitivesNewRelationUpdateRelationInput');
    expect(SchemaNameGenerator.getRelationName(table1Name, relationName1, false, appName)).toBe('AppNamePrimitivesNewRelationRelationInput');
    expect(SchemaNameGenerator.getRelationName(table2Name, relationName1, true, appName)).toBe('AppNameTestNewRelationUpdateRelationInput');
    expect(SchemaNameGenerator.getRelationName(table2Name, relationName1, false, appName)).toBe('AppNameTestNewRelationRelationInput');
    expect(SchemaNameGenerator.getRelationName(table1Name, relationName2, true, appName)).toBe('AppNamePrimitivesOldRelationUpdateRelationInput');
    expect(SchemaNameGenerator.getRelationName(table1Name, relationName2, false, appName)).toBe('AppNamePrimitivesOldRelationRelationInput');
    expect(SchemaNameGenerator.getRelationName(table2Name, relationName2, true, appName)).toBe('AppNameTestOldRelationUpdateRelationInput');
    expect(SchemaNameGenerator.getRelationName(table2Name, relationName2, false, appName)).toBe('AppNameTestOldRelationRelationInput');

    expect(SchemaNameGenerator.getSmartInputType(typeName)).toBe('PhoneInput');

    expect(SchemaNameGenerator.getRelationCreateInputName(table1Name, relationName1)).toBe('NewRelation_PrimitiveCreateInput');
    expect(SchemaNameGenerator.getRelationCreateInputName(table2Name, relationName2)).toBe('OldRelation_TestCreateInput');
  });
});
