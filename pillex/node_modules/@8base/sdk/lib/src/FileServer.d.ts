export declare type MutationResponseData = {
    id: string;
    fileId: string;
    filename: string;
    uploadUrl: string;
    fields: string;
};
export declare type MutationResponse = {
    data: {
        fileCreate: MutationResponseData;
    };
};
export declare type FileUploadLinkMetaData = {
    public?: boolean;
    filename?: string;
    meta?: JSON;
    mods?: JSON;
};
export declare type RequestCallback = (request: XMLHttpRequest) => void;
export declare type EventCallbacks = {
    onProgress?: (event: Event) => void;
    onLoad?: (event: Event) => void;
    onError?: (event: Event) => void;
    onAbort?: (event: Event) => void;
};
export declare type FileUploadLink = {
    file: File;
    mutate: any;
    data?: FileUploadLinkMetaData;
};
export declare type FileUpload = {
    file: File;
    data: MutationResponseData;
};
export declare type FileUploadParams = {
    (params: FileUpload, eventCallbacks?: EventCallbacks, requestCallback?: RequestCallback): Promise<MutationResponseData>;
};
export declare type FileUploadLinkParams = {
    (params: FileUploadLink, eventCallbacks?: EventCallbacks, requestCallback?: RequestCallback): Promise<MutationResponseData>;
};
export default class FileServer {
    private apolloClient;
    constructor(apolloClient: any);
    static uploadLink: FileUploadLinkParams;
    static addEventCallbacks: (request: XMLHttpRequest, eventCallbacks?: EventCallbacks) => void;
    static uploadFile: FileUploadParams;
}
