"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MqttClients_1 = require("../MqttClients");
var CloudSubscriptionClient = (function () {
    function CloudSubscriptionClient() {
        this.observersSet = {};
        this.subscriptionQueue = [];
    }
    CloudSubscriptionClient.prototype.connect = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var mqttClient;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.mqttClient) {
                            return [2];
                        }
                        return [4, MqttClients_1.ConnectToMqttClient(data, this.onReceive.bind(this), this.onClose.bind(this))];
                    case 1:
                        mqttClient = _a.sent();
                        if (!this.mqttClient) {
                            this.mqttClient = mqttClient;
                        }
                        return [4, Promise.all(this.subscriptionQueue.map(function (s) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2, this.subscribeInternal(s.subscription, s.observer)];
                            }); }); }))];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    CloudSubscriptionClient.prototype.subscribe = function (subscription, observer) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.mqttClient) return [3, 1];
                        this.subscriptionQueue.push({ subscription: subscription, observer: observer });
                        return [3, 3];
                    case 1: return [4, this.subscribeInternal(subscription, observer)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    CloudSubscriptionClient.prototype.unsubscribe = function (subscription, observerId) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!subscription) {
                            return [2, null];
                        }
                        path = subscription.path;
                        if (!(this.observersSet[path] && this.observersSet[path][observerId])) return [3, 2];
                        delete this.observersSet[path][observerId];
                        return [4, this.mqttClient.unsubscribe(path)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    CloudSubscriptionClient.prototype.onReceive = function (action, data) {
        var resp = this.processResponse(data);
        var observers = this.observersSet[action];
        if (!resp || !observers) {
            return;
        }
        for (var id in observers) {
            try {
                observers[id].observer.next(resp);
            }
            catch (ex) {
                console.log("error observable next; message = " + ex.message);
            }
        }
    };
    CloudSubscriptionClient.prototype.onClose = function (err) {
        this.mqttClient = null;
        for (var action in this.observersSet) {
            var observers = this.observersSet[action];
            for (var id in observers) {
                var inst = observers[id];
                err ? inst.observer.error(err) : inst.observer.complete();
                observers[id] = null;
            }
        }
        this.observersSet = {};
    };
    CloudSubscriptionClient.prototype.subscribeInternal = function (subscription, observer) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.mqttClient.subscribe(subscription.path, { qos: 1 })];
                    case 1:
                        _a.sent();
                        return [3, 3];
                    case 2:
                        ex_1 = _a.sent();
                        console.log(ex_1);
                        return [2, observer.observer.error(ex_1)];
                    case 3:
                        this.addObserver(subscription, observer);
                        return [2];
                }
            });
        });
    };
    CloudSubscriptionClient.prototype.addObserver = function (subscription, observer) {
        if (!this.observersSet[subscription.path]) {
            this.observersSet[subscription.path] = {};
        }
        this.observersSet[subscription.path][observer.id] = observer;
    };
    CloudSubscriptionClient.prototype.processResponse = function (data) {
        try {
            return JSON.parse(String(data));
        }
        catch (ex) {
            console.log("input data " + data + " is not json format");
        }
        return null;
    };
    return CloudSubscriptionClient;
}());
exports.CloudSubscriptionClient = CloudSubscriptionClient;
//# sourceMappingURL=CloudSubscriptionClient.js.map