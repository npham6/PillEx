"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DeviceSdk = require("aws-iot-device-sdk");
var utils_1 = require("../../utils");
var IotMqttClient = (function () {
    function IotMqttClient() {
        this.onReceive = function () { };
        this.onClose = function () { };
    }
    IotMqttClient.prototype.connect = function (options, onReceive, onClose) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.onReceive = onReceive;
                this.onClose = onClose;
                return [2, new Promise(function (resolve, reject) {
                        _this.client = new DeviceSdk.device({
                            region: options.region,
                            host: options.iotEndpoint,
                            clientId: utils_1.MqttUtils.userToMqttClient(options.cloudUserName),
                            protocol: 'wss',
                            accessKeyId: options.accessKeyId,
                            secretKey: options.secretKey,
                            sessionToken: options.refreshToken,
                            debug: options.debug
                        })
                            .on("connect", function () {
                            _this.setCallback();
                            resolve(_this);
                        })
                            .on("close", function () {
                            _this.client.end();
                            reject();
                        })
                            .on("error", function (err) {
                            _this.client.end();
                            reject(err);
                        });
                    })];
            });
        });
    };
    IotMqttClient.prototype.subscribe = function (topic, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        _this.client.subscribe(topic, {
                            qos: options.qos
                        }, function (err, data) {
                            if (err) {
                                return reject(err);
                            }
                            resolve(data);
                        });
                    })];
            });
        });
    };
    IotMqttClient.prototype.unsubscribe = function (topic) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        _this.client.unsubscribe(topic, null, function (err, data) { return err ? reject(err) : resolve(); });
                    })];
            });
        });
    };
    IotMqttClient.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.client.end();
                return [2];
            });
        });
    };
    IotMqttClient.prototype.setCallback = function () {
        var _this = this;
        this.client.on("message", function (topic, payload) {
            _this.onReceive(topic, payload);
        });
        this.client.on("error", function (err) {
            _this.onClose(err);
        });
        this.client.on("close", function () {
            _this.onClose();
        });
    };
    return IotMqttClient;
}());
exports.IotMqttClient = IotMqttClient;
//# sourceMappingURL=IotMqttClient.js.map