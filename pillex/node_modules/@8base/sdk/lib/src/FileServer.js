"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = require("graphql-tag");
var fp = require("lodash/fp");
var MutationUpload = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  mutation FileCreateMutation ($data: FileCreateInput) {\n    fileCreate(data: $data) {\n      id\n      fileId\n      filename\n      uploadUrl\n      fields\n    }\n  }"], ["\n  mutation FileCreateMutation ($data: FileCreateInput) {\n    fileCreate(data: $data) {\n      id\n      fileId\n      filename\n      uploadUrl\n      fields\n    }\n  }"])));
var getFileNameToUpload = function (file, data) {
    if (data && data.filename)
        return data.filename;
    if (file && file.name)
        return file.name;
    return 'file';
};
var hasErrors = fp.pipe(fp.get('errors'), fp.isEmpty, function (val) { return !val; });
var FileServer = (function () {
    function FileServer(apolloClient) {
        this.apolloClient = apolloClient;
    }
    FileServer.uploadLink = function (_a, eventCallbacks, requestCallback) {
        var file = _a.file, mutate = _a.mutate, data = _a.data;
        return new Promise(function (resolve, reject) {
            var filename = getFileNameToUpload(file, data);
            mutate({
                query: MutationUpload,
                variables: {
                    data: __assign({}, data, { filename: filename }),
                },
            }).subscribe({
                error: function (error) { return reject(error); },
                next: function (response) {
                    var responseData = fp.get(['data', 'fileCreate'], response);
                    if (hasErrors(response) || !responseData)
                        return reject(response);
                    FileServer.uploadFile({ file: file, data: responseData }, eventCallbacks, requestCallback)
                        .then(function () { return resolve(responseData); })
                        .catch(function (error) { return reject(error); });
                }
            });
        });
    };
    FileServer.addEventCallbacks = function (request, eventCallbacks) {
        if (!eventCallbacks)
            return;
        var onProgress = eventCallbacks.onProgress, onLoad = eventCallbacks.onLoad, onError = eventCallbacks.onError, onAbort = eventCallbacks.onAbort;
        onProgress && request.upload.addEventListener('progress', onProgress);
        onLoad && request.upload.addEventListener('load', onLoad);
        onError && request.upload.addEventListener('error', onError);
        onAbort && request.upload.addEventListener('abort', onAbort);
    };
    FileServer.uploadFile = function (_a, eventCallbacks, requestCallback) {
        var file = _a.file, data = _a.data;
        return new Promise(function (resolve, reject) {
            var request = new XMLHttpRequest();
            requestCallback && requestCallback(request);
            FileServer.addEventCallbacks(request, eventCallbacks);
            request.onreadystatechange = function () {
                if (request.readyState === 4) {
                    if (request.status === 200) {
                        resolve(request.response);
                    }
                    else {
                        reject(request.status);
                    }
                }
            };
            var fields = data.fields || {};
            var form = new FormData();
            for (var field in fields) {
                form.append(field, fields[field]);
            }
            form.append('file', file);
            request.open('POST', data.uploadUrl, true);
            request.send(form);
        });
    };
    return FileServer;
}());
exports.default = FileServer;
var templateObject_1;
//# sourceMappingURL=FileServer.js.map