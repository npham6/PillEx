declare const SchemaNameGenerator: {
    getTableItemFieldName: (tableName: string) => string;
    getTableListFieldName: (tableName: string) => string;
    getTableListResponseTypeName: (tableName: string, typePrefix?: string) => string;
    getCreateItemFieldName: (tableName: string) => string;
    getUpdateItemFieldName: (tableName: string) => string;
    getDeleteItemFieldName: (tableName: string) => string;
    getSmartTypeFieldName: (fieldName: string) => string;
    getOrderByInputTypeName: (tableName: string, typePrefix?: string) => string;
    getFilterInputTypeName: (tableName: string, typePrefix?: string) => string;
    getFieldsPermissionsInputTypeName: (tableName: string, typePrefix?: string) => string;
    getEnumItemTypeName: (tableName: string, fieldName: string, typePrefix?: string) => string;
    getUpdateInputName: (tableName: string, typePrefix?: string) => string;
    getDeleteInputName: (tableName: string, typePrefix?: string) => string;
    getCreateInputName: (tableName: string, typePrefix?: string) => string;
    getRelationCreateInputName: (tableName: string, relationFieldName: string, typePrefix?: string) => string;
    getRelationTableFilter: (relationTableName: string, typePrefix?: string) => string;
    makeTableType: (name: string, typePrefix?: string) => string;
    getSubscriptionFilterName: (tableName: string, typePrefix?: string) => string;
    getSubscriptionPayload: (tableName: string, typePrefix?: string) => string;
    getSmartInputType: (formatName: any) => string;
    getRelationName: (tableName: string, relationFieldName: string, isUpdateField: boolean, typePrefix?: string) => string;
};
export default SchemaNameGenerator;
