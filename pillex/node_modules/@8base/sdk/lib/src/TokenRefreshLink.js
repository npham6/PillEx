"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var fp = require("lodash/fp");
var errorCodes = require("@8base/error-codes");
var graphql_tag_1 = require("graphql-tag");
var apollo_link_2 = require("apollo-link");
var RefreshTokenInvalidError = (function (_super) {
    __extends(RefreshTokenInvalidError, _super);
    function RefreshTokenInvalidError(message) {
        var _newTarget = this.constructor;
        var _this = this;
        var errorProto = _newTarget.prototype;
        _this = _super.call(this, message) || this;
        _this.__proto__ = errorProto;
        return _this;
    }
    return RefreshTokenInvalidError;
}(Error));
exports.RefreshTokenInvalidError = RefreshTokenInvalidError;
var TokenRefreshLink = (function (_super) {
    __extends(TokenRefreshLink, _super);
    function TokenRefreshLink(params) {
        var _this = _super.call(this) || this;
        _this.setRefreshTokenInput = params.setRefreshTokenInput;
        _this.authReceived = params.authReceived;
        _this.authFailed = params.authFailed;
        return _this;
    }
    TokenRefreshLink.prototype.request = function (operation, forward) {
        var _this = this;
        return new apollo_link_1.Observable(function (observer) {
            var preventComplete = false;
            var subscription;
            var handleTokenRefresh = function () {
                preventComplete = true;
                _this.refreshToken(_this.setRefreshTokenInput(), function (req) { return forward(apollo_link_2.createOperation(operation.getContext(), req)); })
                    .then(function (auth) {
                    _this.authReceived(auth);
                    preventComplete = false;
                    var observable = forward(operation);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                    subscription = observable.subscribe(subscriber);
                }).catch(function (err) {
                    preventComplete = false;
                    if (err instanceof RefreshTokenInvalidError) {
                        _this.passAuthFailed(err);
                    }
                    else {
                        observer.error(err);
                    }
                });
            };
            var hasTokenExpiredError = function (error) {
                return error && (error.code === errorCodes.TokenExpiredErrorCode || error.message == "jwt expired");
            };
            var hasTokenInvalidError = function (error) {
                return error && (error.code === errorCodes.InvalidTokenErrorCode);
            };
            var hasTokenExpiredErrorInArray = fp.some(hasTokenExpiredError);
            var hasTokenInvalidErrorInArray = fp.some(hasTokenInvalidError);
            var subscriber = {
                next: function (data) {
                    var dataErrors = data.errors || [];
                    if (hasTokenExpiredErrorInArray(dataErrors)) {
                        handleTokenRefresh();
                    }
                    else if (hasTokenInvalidErrorInArray(dataErrors)) {
                        _this.passAuthFailed();
                    }
                    else {
                        observer.next(data);
                    }
                },
                error: function (error) {
                    var batchedErrors = fp.getOr([], ['response', 'parsed', 'errors'], error);
                    if (hasTokenExpiredErrorInArray(batchedErrors) || hasTokenExpiredError(error)) {
                        handleTokenRefresh();
                    }
                    else if (hasTokenInvalidErrorInArray(batchedErrors) || hasTokenInvalidError(error)) {
                        _this.passAuthFailed();
                    }
                    else {
                        observer.error(error);
                    }
                },
                complete: function () {
                    if (!preventComplete) {
                        observer.complete();
                    }
                },
            };
            subscription = forward(operation).subscribe(subscriber);
            return subscription;
        });
    };
    TokenRefreshLink.prototype.passAuthFailed = function (error) {
        this.authFailed && this.authFailed(error);
    };
    TokenRefreshLink.prototype.refreshToken = function (params, mutate) {
        var email = params.email, refreshToken = params.refreshToken;
        var result = new Promise(function (resolve, reject) {
            mutate({
                query: graphql_tag_1.default("\n        mutation Mutation ($refreshToken: String!, $email: String!) {\n          userRefreshToken(data:{refreshToken: $refreshToken, email: $email}) {\n            refreshToken\n            idToken\n          }\n        }"),
                variables: {
                    "refreshToken": refreshToken,
                    "email": email
                }
            }).subscribe({
                error: function (error) {
                    reject(error);
                },
                next: function (_a) {
                    var data = _a.data;
                    if (data === null || data.userRefreshToken === null) {
                        reject(new RefreshTokenInvalidError('Can not refresh token'));
                    }
                    else {
                        var _b = data.userRefreshToken, refreshToken_1 = _b.refreshToken, idToken = _b.idToken;
                        resolve({ refreshToken: refreshToken_1, idToken: idToken });
                    }
                }
            });
        });
        return result;
    };
    return TokenRefreshLink;
}(apollo_link_1.ApolloLink));
exports.default = TokenRefreshLink;
//# sourceMappingURL=TokenRefreshLink.js.map