"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var fp = require("lodash/fp");
var FileServer_1 = require("./FileServer");
var apollo_link_2 = require("apollo-link");
exports.FILE_FIELD_NAME = "$file";
exports.MAXIMUM_OBJECT_DEEP = 10 * 3;
exports.mutateOperationVariablesDeep = function (parentObject, partialObject, handler, counter) {
    if (counter > exports.MAXIMUM_OBJECT_DEEP)
        return;
    for (var fieldName in partialObject) {
        var currentField = partialObject[fieldName];
        if (fieldName === exports.FILE_FIELD_NAME && currentField instanceof File) {
            handler(parentObject, partialObject);
        }
        else if (fp.isArray(currentField)) {
            ++counter;
            for (var _i = 0, currentField_1 = currentField; _i < currentField_1.length; _i++) {
                var el = currentField_1[_i];
                exports.mutateOperationVariablesDeep(partialObject, el, handler, counter);
            }
        }
        else if (fp.isObject(currentField)) {
            exports.mutateOperationVariablesDeep(partialObject, currentField, handler, ++counter);
        }
    }
};
exports.mutateOperationVariables = function (partialObject, handler) {
    return exports.mutateOperationVariablesDeep(null, partialObject, handler, 0);
};
var FileUploadLink = (function (_super) {
    __extends(FileUploadLink, _super);
    function FileUploadLink() {
        var _this = _super.call(this) || this;
        _this.handleFile = function (operation, forward, observer) {
            return function (parentObject, variables) { return __awaiter(_this, void 0, void 0, function () {
                var file, upload;
                return __generator(this, function (_a) {
                    file = variables[exports.FILE_FIELD_NAME];
                    delete variables[exports.FILE_FIELD_NAME];
                    upload = FileServer_1.default.uploadLink({
                        file: file,
                        mutate: function (req) { return forward(apollo_link_2.createOperation(operation.getContext(), req)); },
                        data: variables
                    }).then(function (_a) {
                        var id = _a.id;
                        if (fp.isArray(parentObject.create) || fp.isArray(parentObject.connect)) {
                            if (fp.isUndefined(parentObject.connect)) {
                                parentObject.connect = [];
                            }
                            parentObject.connect.push({ id: id });
                        }
                        else {
                            parentObject.connect = { id: id };
                        }
                        delete parentObject.create;
                    })
                        .catch(function (error) {
                        observer.next(error);
                        observer.complete();
                        return;
                    });
                    this.fileUploadPromises.push(upload);
                    return [2];
                });
            }); };
        };
        _this.fileUploadPromises = [];
        return _this;
    }
    FileUploadLink.prototype.request = function (operation, forward) {
        var _this = this;
        return new apollo_link_1.Observable(function (observer) {
            var onError = function (error) { return observer.error(error); };
            exports.mutateOperationVariables(operation.variables, _this.handleFile(operation, forward, observer));
            Promise.all(_this.fileUploadPromises)
                .then(function () {
                forward(operation).subscribe({
                    error: function (error) {
                        observer.error(error);
                    },
                    next: observer.next.bind(observer),
                    complete: function () { return observer.complete(); }
                });
            })
                .catch(onError);
        });
    };
    return FileUploadLink;
}(apollo_link_1.ApolloLink));
exports.default = FileUploadLink;
//# sourceMappingURL=FileUploadLink.js.map