"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var FileServer_1 = require("../src/FileServer");
var apollo_link_1 = require("apollo-link");
var async_1 = require("async");
var initialXMLHttpRequest = XMLHttpRequest;
beforeEach(function () {
    global.XMLHttpRequest = initialXMLHttpRequest;
});
describe('FileServerNew', function () {
    var XMLHttpRequestMock = (function () {
        function XMLHttpRequestMock() {
            var _this = this;
            this.upload = {};
            this.open = function () { };
            this.readyState = 4;
            this.status = 200;
            this.response = true;
            this.send = function () {
                async_1.nextTick(function () {
                    _this.onreadystatechange();
                });
            };
        }
        return XMLHttpRequestMock;
    }());
    var addDataWrapper = function (response) { return ({
        "data": {
            "fileCreate": response
        }
    }); };
    var responseData = {
        "fileId": "someId",
        "uploadUrl": "someUrl",
        "fields": "{\"policy\":\"ey\"}"
    };
    var file = new File([''], '');
    var createSuccessOperation = function (response) { return function () { return new apollo_link_1.Observable(function (observer) {
        observer.next(response);
    }); }; };
    var createRejectedOperation = function (error) { return function () { return new apollo_link_1.Observable(function (observer) {
        observer.error(error);
    }); }; };
    describe('uploadFile', function () {
        it("should add params to request method", function () { return __awaiter(_this, void 0, void 0, function () {
            var mockOpen, mockSend, ExtendedXMLHttp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockOpen = jest.fn();
                        mockSend = jest.fn(function () {
                            var _this = this;
                            async_1.nextTick(function () {
                                _this.onreadystatechange();
                            });
                        });
                        ExtendedXMLHttp = (function (_super) {
                            __extends(ExtendedXMLHttp, _super);
                            function ExtendedXMLHttp() {
                                var _this = _super !== null && _super.apply(this, arguments) || this;
                                _this.open = mockOpen;
                                _this.send = mockSend;
                                return _this;
                            }
                            return ExtendedXMLHttp;
                        }(XMLHttpRequestMock));
                        global.XMLHttpRequest = ExtendedXMLHttp;
                        return [4, FileServer_1.default.uploadFile({ file: file, data: responseData }).then(function () {
                                expect(mockSend.mock.calls[0][0].get('file')).toBe(file);
                                expect(mockOpen).toHaveBeenCalledWith('POST', responseData.uploadUrl, true);
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        it("should resolve when correct status", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        global.XMLHttpRequest = XMLHttpRequestMock;
                        return [4, FileServer_1.default.uploadFile({ file: file, data: responseData }).then(function (response) {
                                expect(response).toBeTruthy();
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        it("should reject when error ready state status", function (done) {
            var InvalidXMLHttpRequest = (function (_super) {
                __extends(InvalidXMLHttpRequest, _super);
                function InvalidXMLHttpRequest() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.status = 66;
                    return _this;
                }
                return InvalidXMLHttpRequest;
            }(XMLHttpRequestMock));
            global.XMLHttpRequest = InvalidXMLHttpRequest;
            FileServer_1.default.uploadFile({ file: file, data: responseData }).catch(function (err) {
                expect(err).toBe(66);
                done();
            });
        });
    });
    describe('uploadLink', function () {
        it("should make mutation and get result", function () { return __awaiter(_this, void 0, void 0, function () {
            var responseData, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        global.XMLHttpRequest = XMLHttpRequestMock;
                        responseData = {
                            "fileId": "someId",
                            "uploadUrl": "someUrl",
                            "fields": "{\"policy\":\"ey\"}"
                        };
                        response = addDataWrapper(responseData);
                        return [4, FileServer_1.default.uploadLink({ file: file, mutate: createSuccessOperation(response) }).then(function (data) {
                                expect(data).toMatchObject(responseData);
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        it("should reject on mutation error", function (done) {
            var error = 'some error';
            FileServer_1.default.uploadLink({ file: file, mutate: createRejectedOperation(error) })
                .catch(function (err) {
                expect(err).toBe(error);
                done();
            });
        });
        it("should reject on upload error", function (done) {
            var InvalidXMLHttpRequest = (function (_super) {
                __extends(InvalidXMLHttpRequest, _super);
                function InvalidXMLHttpRequest() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.status = 66;
                    return _this;
                }
                return InvalidXMLHttpRequest;
            }(XMLHttpRequestMock));
            global.XMLHttpRequest = InvalidXMLHttpRequest;
            var response = addDataWrapper(responseData);
            FileServer_1.default.uploadLink({ file: file, mutate: createSuccessOperation(response) })
                .catch(function (err) {
                expect(err).toBe(66);
                done();
            });
        });
    });
    describe('addEventCallbacks', function () {
        it("should add event callbacks", function () { return __awaiter(_this, void 0, void 0, function () {
            var request, eventCallbacks, dispatchEvent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = new XMLHttpRequest();
                        eventCallbacks = {
                            onProgress: jest.fn(),
                            onLoad: jest.fn(),
                            onError: jest.fn(),
                            onAbort: jest.fn(),
                        };
                        FileServer_1.default.addEventCallbacks(request, eventCallbacks);
                        dispatchEvent = function (event) { return request.upload.dispatchEvent(event); };
                        return [4, async_1.nextTick(function () {
                                dispatchEvent(new ProgressEvent('progress'));
                                expect(eventCallbacks.onProgress).toHaveBeenCalled();
                                dispatchEvent(new ProgressEvent('load'));
                                expect(eventCallbacks.onLoad).toHaveBeenCalled();
                                dispatchEvent(new ProgressEvent('error'));
                                expect(eventCallbacks.onError).toHaveBeenCalled();
                                dispatchEvent(new ProgressEvent('abort'));
                                expect(eventCallbacks.onAbort).toHaveBeenCalled();
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
    });
});
//# sourceMappingURL=FileServer.test.js.map