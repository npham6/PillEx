"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var SchemaNameGenerator_1 = require("../src/SchemaNameGenerator");
describe('checking name generation', function () {
    test('generate names', function () { return __awaiter(_this, void 0, void 0, function () {
        var appName, table1Name, table2Name, relationName1, relationName2, typeName;
        return __generator(this, function (_a) {
            expect.assertions(45);
            appName = "AppName";
            table1Name = 'Primitives';
            table2Name = 'test';
            relationName1 = 'NewRelation';
            relationName2 = 'oldRelation';
            typeName = 'PHONE';
            expect(SchemaNameGenerator_1.default.getTableItemFieldName(table1Name)).toBe('primitive');
            expect(SchemaNameGenerator_1.default.getTableItemFieldName(table2Name)).toBe('test');
            expect(SchemaNameGenerator_1.default.getTableListFieldName(table1Name)).toBe('primitivesList');
            expect(SchemaNameGenerator_1.default.getTableListFieldName(table2Name)).toBe('testsList');
            expect(SchemaNameGenerator_1.default.getCreateItemFieldName(table1Name)).toBe('primitiveCreate');
            expect(SchemaNameGenerator_1.default.getCreateItemFieldName(table2Name)).toBe('testCreate');
            expect(SchemaNameGenerator_1.default.getUpdateItemFieldName(table1Name)).toBe('primitiveUpdate');
            expect(SchemaNameGenerator_1.default.getUpdateItemFieldName(table2Name)).toBe('testUpdate');
            expect(SchemaNameGenerator_1.default.getDeleteItemFieldName(table1Name)).toBe('primitiveDelete');
            expect(SchemaNameGenerator_1.default.getDeleteItemFieldName(table2Name)).toBe('testDelete');
            expect(SchemaNameGenerator_1.default.getSmartTypeFieldName("testFields")).toBe("Testfield");
            expect(SchemaNameGenerator_1.default.getFilterInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveFilter');
            expect(SchemaNameGenerator_1.default.getFilterInputTypeName(table2Name, appName)).toBe('AppNameTestFilter');
            expect(SchemaNameGenerator_1.default.getOrderByInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveOrderBy');
            expect(SchemaNameGenerator_1.default.getOrderByInputTypeName(table2Name, appName)).toBe('AppNameTestOrderBy');
            expect(SchemaNameGenerator_1.default.getCreateInputName(table1Name, appName)).toBe("AppNamePrimitiveCreateInput");
            expect(SchemaNameGenerator_1.default.getCreateInputName(table2Name, appName)).toBe("AppNameTestCreateInput");
            expect(SchemaNameGenerator_1.default.getUpdateInputName(table1Name, appName)).toBe("AppNamePrimitiveUpdateInput");
            expect(SchemaNameGenerator_1.default.getUpdateInputName(table2Name, appName)).toBe("AppNameTestUpdateInput");
            expect(SchemaNameGenerator_1.default.getDeleteInputName(table1Name, appName)).toBe("AppNamePrimitiveDeleteInput");
            expect(SchemaNameGenerator_1.default.getDeleteInputName(table2Name, appName)).toBe("AppNameTestDeleteInput");
            expect(SchemaNameGenerator_1.default.getRelationTableFilter(table1Name, appName)).toBe("AppNamePrimitiveRelationFilter");
            expect(SchemaNameGenerator_1.default.getRelationTableFilter(table2Name, appName)).toBe("AppNameTestRelationFilter");
            expect(SchemaNameGenerator_1.default.makeTableType(table1Name, appName)).toBe("AppNamePrimitive");
            expect(SchemaNameGenerator_1.default.makeTableType(table2Name, appName)).toBe("AppNameTest");
            expect(SchemaNameGenerator_1.default.getSubscriptionFilterName(table1Name, appName)).toBe("AppNamePrimitiveSubscriptionFilter");
            expect(SchemaNameGenerator_1.default.getSubscriptionFilterName(table2Name, appName)).toBe("AppNameTestSubscriptionFilter");
            expect(SchemaNameGenerator_1.default.getSubscriptionPayload(table1Name, appName)).toBe("AppNamePrimitivePayload");
            expect(SchemaNameGenerator_1.default.getSubscriptionPayload(table2Name, appName)).toBe("AppNameTestPayload");
            expect(SchemaNameGenerator_1.default.getFieldsPermissionsInputTypeName(table1Name, appName)).toBe('AppNamePrimitiveFieldsPermissions');
            expect(SchemaNameGenerator_1.default.getFieldsPermissionsInputTypeName(table2Name, appName)).toBe('AppNameTestFieldsPermissions');
            expect(SchemaNameGenerator_1.default.getEnumItemTypeName(table2Name, "testField", appName)).toBe("AppNameTest_TestFieldEnum");
            expect(SchemaNameGenerator_1.default.getTableListResponseTypeName(table1Name, appName)).toBe('AppNamePrimitiveListResponse');
            expect(SchemaNameGenerator_1.default.getTableListResponseTypeName(table2Name, appName)).toBe('AppNameTestListResponse');
            expect(SchemaNameGenerator_1.default.getRelationName(table1Name, relationName1, true, appName)).toBe('AppNamePrimitivesNewRelationUpdateRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table1Name, relationName1, false, appName)).toBe('AppNamePrimitivesNewRelationRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table2Name, relationName1, true, appName)).toBe('AppNameTestNewRelationUpdateRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table2Name, relationName1, false, appName)).toBe('AppNameTestNewRelationRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table1Name, relationName2, true, appName)).toBe('AppNamePrimitivesOldRelationUpdateRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table1Name, relationName2, false, appName)).toBe('AppNamePrimitivesOldRelationRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table2Name, relationName2, true, appName)).toBe('AppNameTestOldRelationUpdateRelationInput');
            expect(SchemaNameGenerator_1.default.getRelationName(table2Name, relationName2, false, appName)).toBe('AppNameTestOldRelationRelationInput');
            expect(SchemaNameGenerator_1.default.getSmartInputType(typeName)).toBe('PhoneInput');
            expect(SchemaNameGenerator_1.default.getRelationCreateInputName(table1Name, relationName1)).toBe('NewRelation_PrimitiveCreateInput');
            expect(SchemaNameGenerator_1.default.getRelationCreateInputName(table2Name, relationName2)).toBe('OldRelation_TestCreateInput');
            return [2];
        });
    }); });
});
//# sourceMappingURL=SchemaNameGenerator.test.js.map