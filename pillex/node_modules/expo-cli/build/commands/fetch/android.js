'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchAndroidHashesAsync = exports.fetchAndroidKeystoreAsync = undefined;

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var fetchAndroidKeystoreAsync = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir) {
    var _ref2, _ref2$args, username, remotePackageName, experienceName, backupKeystoreOutputPath;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref2 = _context.sent;
            _ref2$args = _ref2.args;
            username = _ref2$args.username;
            remotePackageName = _ref2$args.remotePackageName;
            experienceName = _ref2$args.remoteFullPackageName;
            backupKeystoreOutputPath = _path.default.resolve(projectDir, remotePackageName + '.jks');
            _context.next = 10;
            return (_xdl || _load_xdl()).Credentials.backupExistingAndroidCredentials({
              outputPath: backupKeystoreOutputPath,
              username: username,
              experienceName: experienceName,
              log: (_log || _load_log()).default
            });

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function fetchAndroidKeystoreAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var fetchAndroidHashesAsync = function () {
  var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(projectDir) {
    var _ref4, _ref4$args, username, remotePackageName, experienceName, outputPath, _ref5, keystorePassword, keyAlias, certFile, data, googleHash, googleHash256, fbHash;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref4 = _context2.sent;
            _ref4$args = _ref4.args;
            username = _ref4$args.username;
            remotePackageName = _ref4$args.remotePackageName;
            experienceName = _ref4$args.remoteFullPackageName;
            outputPath = _path.default.resolve(projectDir, remotePackageName + '.tmp.jks');
            _context2.next = 10;
            return (_xdl || _load_xdl()).Credentials.backupExistingAndroidCredentials({
              outputPath: outputPath,
              username: username,
              experienceName: experienceName,
              log: (_log || _load_log()).default,
              logSecrets: false
            });

          case 10:
            _ref5 = _context2.sent;
            keystorePassword = _ref5.keystorePassword;
            keyAlias = _ref5.keyAlias;
            certFile = outputPath.replace('jks', 'cer');
            _context2.prev = 14;
            _context2.next = 17;
            return _exportCertAsync(outputPath, keystorePassword, keyAlias, certFile);

          case 17:
            data = _fs.default.readFileSync(certFile);
            googleHash = _crypto.default.createHash('sha1').update(data).digest('hex').toUpperCase();
            googleHash256 = _crypto.default.createHash('sha256').update(data).digest('hex').toUpperCase();
            fbHash = _crypto.default.createHash('sha1').update(data).digest('base64');

            (0, (_log || _load_log()).default)('Google Certificate Fingerprint:     ' + googleHash.replace(/(.{2}(?!$))/g, '$1:'));
            (0, (_log || _load_log()).default)('Google Certificate Hash (SHA-1):    ' + googleHash);
            (0, (_log || _load_log()).default)('Google Certificate Hash (SHA-256):  ' + googleHash256);
            (0, (_log || _load_log()).default)('Facebook Key Hash:                  ' + fbHash);
            _context2.next = 33;
            break;

          case 27:
            _context2.prev = 27;
            _context2.t0 = _context2['catch'](14);

            if (_context2.t0.code === 'ENOENT') {
              (_log || _load_log()).default.warn('Are you sure you have keytool installed?');
              (0, (_log || _load_log()).default)('keytool is part of openJDK: http://openjdk.java.net/');
              (0, (_log || _load_log()).default)('Also make sure that keytool is in your PATH after installation.');
            }
            if (_context2.t0.stdout) {
              (0, (_log || _load_log()).default)(_context2.t0.stdout);
            }
            if (_context2.t0.stderr) {
              (_log || _load_log()).default.error(_context2.t0.stderr);
            }
            throw _context2.t0;

          case 33:
            _context2.prev = 33;

            try {
              _fs.default.unlinkSync(certFile);
            } catch (err) {
              if (err.code !== 'ENOENT') {
                (_log || _load_log()).default.error(err);
              }
            }
            try {
              _fs.default.unlinkSync(outputPath);
            } catch (err) {
              if (err.code !== 'ENOENT') {
                (_log || _load_log()).default.error(err);
              }
            }
            return _context2.finish(33);

          case 37:

            (0, (_log || _load_log()).default)('All done!');

          case 38:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[14, 27, 33, 37]]);
  }));

  return function fetchAndroidHashesAsync(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = _interopRequireDefault(require('path'));

var _fs = _interopRequireDefault(require('fs'));

var _crypto = _interopRequireDefault(require('crypto'));

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _exportCertAsync(keystoreFile, keystorePassword, keyAlias, certFile) {
  return (0, (_spawnAsync || _load_spawnAsync()).default)('keytool', ['-exportcert', '-keystore', keystoreFile, '-storepass', keystorePassword, '-alias', keyAlias, '-file', certFile, '-noprompt', '-storetype', 'JKS']);
}

exports.fetchAndroidKeystoreAsync = fetchAndroidKeystoreAsync;
exports.fetchAndroidHashesAsync = fetchAndroidHashesAsync;
//# sourceMappingURL=../../__sourcemaps__/commands/fetch/android.js.map
