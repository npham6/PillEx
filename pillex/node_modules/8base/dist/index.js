#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const commandController_1 = require("./engine/controllers/commandController");
const translations_1 = require("./common/translations");
const start = (translations) => {
    yargs.usage(translations.i18n.t("8base_usage"));
    yargs.scriptName("8base");
    commandController_1.CommandController.enumerate()
        .map(cmd => {
        yargs.command({
            command: cmd.name,
            builder: cmd.builder,
            describe: cmd.describe,
            handler: commandController_1.CommandController.wrapHandler(cmd.handler, translations)
        })
            .option('d', {
            hidden: true
        });
    });
    const argv = yargs
        .alias('h', 'help')
        .option('h', {
        global: false
    })
        .alias('v', 'version')
        .option('v', {
        global: false
    })
        .option('d', {
        alias: "debug",
        describe: "turn on debug logs",
        type: "boolean"
    })
        .recommendCommands()
        .strict()
        .fail((msg, err) => {
        // certain yargs validations throw strings :P
        const actual = err || new Error(msg);
        // ValidationErrors are already logged, as are package errors
        if (actual.name !== "ValidationError") {
            if (/Did you mean/.test(actual.message)) {
                console.error("Unknown command");
            }
            console.error(actual.message);
        }
        process.exit(0);
    })
        .argv;
    if (!argv._[0]) {
        yargs.showHelp();
    }
};
translations_1.translations.init()
    .then((translations) => {
    start(translations);
})
    .catch(err => console.error(err.message));
//# sourceMappingURL=index.js.map