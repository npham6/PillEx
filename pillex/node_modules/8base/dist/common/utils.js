"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
require("isomorphic-fetch");
const request = require("request");
const fs = require("fs");
const archiver = require("archiver");
const interactive_1 = require("./interactive");
const _ = require("lodash");
const MemoryStream = require("memorystream");
const streamToBuffer = require("stream-to-buffer");
var Utils;
(function (Utils) {
    Utils.undefault = (m) => {
        return m.default ? m.default : m;
    };
    Utils.safeExecution = (cmd) => {
        try {
            return {
                result: cmd(),
                error: null
            };
        }
        catch (err) {
            return {
                result: null,
                error: err
            };
        }
    };
    Utils.installFiles = (targetDirectory, files, fs, context) => {
        files.forEach((data, name) => {
            const fullName = path.join(targetDirectory, name);
            const fullPath = path.dirname(fullName);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath);
            }
            fs.writeFileSync(fullName, data);
            context.logger.debug("install file = " + fullName);
        });
        return targetDirectory;
    };
    Utils.upload = (url, fileStream, context) => __awaiter(this, void 0, void 0, function* () {
        context.logger.debug("start upload file");
        context.logger.debug("url: " + url);
        return new Promise((resolve, reject) => {
            streamToBuffer(fileStream, (err, data) => {
                request({
                    method: "PUT",
                    url: url,
                    body: data,
                    headers: {
                        'Content-Length': data.length
                    }
                }, (err, res, body) => {
                    if (err) {
                        return reject(err);
                    }
                    if (res && res.statusCode !== 200) {
                        return reject(new Error(res.body));
                    }
                    context.logger.debug("upload file success");
                    resolve();
                });
            });
        });
    });
    Utils.archiveToMemory = (directories, context) => __awaiter(this, void 0, void 0, function* () {
        const memoryStream = new MemoryStream(null);
        return new Promise((resolve, reject) => {
            const zip = archiver("zip", { zlib: { level: 0 } });
            zip.pipe(memoryStream);
            directories.forEach((sourcePath) => {
                const source = fs.statSync(sourcePath.source);
                context.logger.debug("archive files from directory = " + sourcePath.source + " dist = " + sourcePath.dist + " is file = " + source.isFile());
                source.isFile()
                    ? zip.file(sourcePath.source, {})
                    : zip.directory(sourcePath.source, sourcePath.dist || false);
            });
            zip.on('error', (err) => {
                context.logger.debug('Error while zipping build: ' + err);
                reject(new Error(err));
            });
            zip.on('finish', () => {
                context.logger.debug('zipping finish');
                memoryStream.end();
                resolve(memoryStream);
            });
            zip.on('end', () => {
                context.logger.debug('zipping end');
            });
            zip.on('warning', (error) => {
                context.logger.warn(error);
            });
            zip.finalize();
        });
    });
    Utils.promptWorkspace = (workspaces, context) => __awaiter(this, void 0, void 0, function* () {
        if (_.isEmpty(workspaces)) {
            throw new Error(context.i18n.t("logout_error"));
        }
        if (workspaces.length === 1) {
            return workspaces[0];
        }
        const result = yield interactive_1.Interactive.ask({
            name: "workspace",
            type: "select",
            message: "choose workspace",
            choices: workspaces.map(workspace => {
                return {
                    title: workspace.name,
                    value: workspace.id
                };
            })
        });
        return {
            id: result.workspace
        };
    });
    Utils.sleep = (ms) => {
        return new Promise(resolve => setTimeout(resolve, ms));
    };
    Utils.trimLastSlash = (url) => {
        if (!_.isString(url) || url.length === 0) {
            return "";
        }
        return url[url.length - 1] === "/" ? url.substr(0, url.length - 1) : url;
    };
})(Utils = exports.Utils || (exports.Utils = {}));
//# sourceMappingURL=utils.js.map