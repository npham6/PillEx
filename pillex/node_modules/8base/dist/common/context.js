"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const userDataStorage_1 = require("./userDataStorage");
const config_1 = require("../config");
const _ = require("lodash");
const projectController_1 = require("../engine/controllers/projectController");
const StorageParameters_1 = require("../consts/StorageParameters");
const winston = require("winston");
const Ora = require("ora");
const chalk_1 = require("chalk");
const Colors_1 = require("../consts/Colors");
const utils_1 = require("./utils");
const GraphqlActions_1 = require("../consts/GraphqlActions");
const { Client } = require("@8base/api-client");
const pkg = require('../../package.json');
class Context {
    constructor(params, translations) {
        this._project = null;
        this.spinner = new Ora({
            color: "white",
            text: "\n"
        });
        this.logger = winston.createLogger({
            level: params.d ? "debug" : "info",
            format: winston.format.printf((info) => {
                if (info.level === "info") {
                    return info.message;
                }
                if (info.level === "debug") {
                    return `${chalk_1.default.hex(Colors_1.Colors.blue)(info.level)} [${Date.now()}]: ${info.message}`;
                }
                return `${chalk_1.default.hex(Colors_1.Colors.red)(info.level)}: ${info.message}`;
            }),
            transports: [new winston.transports.Console()]
        });
        this.i18n = translations.i18n;
        this.version = pkg.version;
    }
    get serverAddress() {
        return this.storage.getValue(StorageParameters_1.StorageParameters.serverAddress) || this.config.remoteAddress;
    }
    get storage() {
        return userDataStorage_1.UserDataStorage;
    }
    get config() {
        return config_1.StaticConfig;
    }
    setSessionInfo(data) {
        if (!data) {
            this.logger.debug("set session info empty data");
            return;
        }
        this.logger.debug("set session info...");
        if (_.isString(data.idToken)) {
            this.logger.debug(`id token ${data.idToken.substr(0, 10)}`);
        }
        if (_.isString(data.refreshToken)) {
            this.logger.debug(`refresh token: ${data.refreshToken.substr(0, 10)}`);
        }
        this.storage.setValues([
            {
                name: StorageParameters_1.StorageParameters.refreshToken,
                value: data.refreshToken
            },
            {
                name: StorageParameters_1.StorageParameters.idToken,
                value: data.idToken
            },
        ]);
    }
    chooseWorkspace(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.request(GraphqlActions_1.GraphqlActions.listWorkspaces, null, false);
            this.storage.setValues([
                {
                    name: StorageParameters_1.StorageParameters.workspaces,
                    value: data.workspacesList.items
                }
            ]);
            const workspaces = this.storage.getValue(StorageParameters_1.StorageParameters.workspaces);
            if (_.isEmpty(workspaces)) {
                throw new Error(this.i18n.t("logout_error"));
            }
            const selectedWorkspaceId = workspaceId ? workspaceId : (yield utils_1.Utils.promptWorkspace(workspaces, this)).id;
            const activeWorkspace = workspaces.find((workspace) => workspace.id === selectedWorkspaceId);
            if (!activeWorkspace) {
                throw new Error("Workspace " + selectedWorkspaceId + " is absent");
            }
            this.storage.setValues([
                {
                    name: StorageParameters_1.StorageParameters.activeWorkspace,
                    value: selectedWorkspaceId
                }
            ]);
            this.logger.info(`Workspace ${chalk_1.default.hex(Colors_1.Colors.yellow)(activeWorkspace.name)} is active`);
            this.logger.info(`\nAPI endpoint URL: https:\/\/api.8base.com/${activeWorkspace.id}\n`);
        });
    }
    request(query, variables = null, isLoginRequired = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const remoteAddress = this.serverAddress;
            this.logger.debug(this.i18n.t("debug:remote_address", { remoteAddress }));
            const client = new Client(remoteAddress);
            this.logger.debug(`query: ${query}`);
            this.logger.debug(`variables: ${JSON.stringify(variables)}`);
            const refreshToken = this.storage.getValue(StorageParameters_1.StorageParameters.refreshToken);
            if (refreshToken) {
                this.logger.debug(this.i18n.t("debug:set refresh token"));
                client.setRefreshToken(refreshToken);
            }
            const idToken = this.storage.getValue(StorageParameters_1.StorageParameters.idToken);
            if (idToken) {
                this.logger.debug(this.i18n.t("debug:set_id_token"));
                client.setIdToken(idToken);
            }
            const workspaceId = this.storage.getValue(StorageParameters_1.StorageParameters.activeWorkspace);
            if (workspaceId) {
                this.logger.debug(this.i18n.t("debug:set_workspace_id", { workspaceId }));
                client.setWorkspaceId(workspaceId);
            }
            if (isLoginRequired && (_.isEmpty(idToken) || _.isEmpty(refreshToken))) {
                throw new Error(this.i18n.t("logout_error"));
            }
            this.logger.debug(this.i18n.t("debug:start_request"));
            const result = yield client.request(query, variables);
            this.logger.debug(this.i18n.t("debug:request_complete"));
            if (client.idToken !== idToken) {
                this.logger.debug(this.i18n.t("debug:reset_id_token"));
                this.storage.setValues([{
                        name: StorageParameters_1.StorageParameters.idToken,
                        value: client.idToken
                    }]);
            }
            if (client.refreshToken !== refreshToken) {
                this.logger.debug(this.i18n.t("debug:reset_refresh_token"));
                this.storage.setValues([{
                        name: StorageParameters_1.StorageParameters.refreshToken,
                        value: client.refreshToken
                    }]);
            }
            return result;
        });
    }
    initializeProject() {
        this.project;
    }
    get project() {
        if (_.isNil(this._project)) {
            this._project = projectController_1.ProjectController.initialize(this);
        }
        return this._project;
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map