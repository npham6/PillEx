"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config");
const path = require("path");
const fs = require("fs");
class Storage {
    /**
     *  path to storage file is persistent
     */
    static get pathToStorage() {
        return path.join(config_1.StaticConfig.homePath, this.storageFileName);
    }
    /**
     * Function check exist and create storage file.
     *
     * @returns path to instanced repository file
     */
    static checkStorageExist() {
        const storagePath = this.pathToStorage;
        if (!fs.existsSync(storagePath)) {
            fs.writeFileSync(storagePath, "{}");
        }
    }
    static parseStorageData() {
        return JSON.parse(fs.readFileSync(this.pathToStorage).toString());
    }
    static getStorage() {
        this.checkStorageExist();
        return this.parseStorageData();
    }
    static saveStorage(storage) {
        fs.writeFileSync(this.pathToStorage, this.toPrettyString(storage));
    }
    static toPrettyString(storage) {
        return JSON.stringify(storage, null, 2);
    }
}
Storage.storageFileName = ".8baserc";
class UserDataStorage {
    /**
     * Function is not thread safe !
     * @param token - user token
     */
    static setValues(data) {
        const storage = Storage.getStorage();
        data.map(d => storage[d.name] = d.value);
        Storage.saveStorage(storage);
    }
    static getValue(name) {
        const storage = Storage.getStorage();
        return storage ? storage[name] : null;
    }
    static clearAll() {
        const storage = Storage.getStorage();
        delete storage.auth;
        delete storage.email;
        delete storage.accountId;
        delete storage.remoteCliEndpoint;
        Storage.saveStorage(storage);
    }
    static toString() {
        return Storage.toPrettyString(Storage.getStorage());
    }
}
exports.UserDataStorage = UserDataStorage;
//# sourceMappingURL=userDataStorage.js.map