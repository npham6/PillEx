"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const execa = require("execa");
const runner_1 = require("../runner");
const TEST_DIR = 'testdir_init';
it('As a user, I can use help flag for see help information for `init` command.', () => __awaiter(this, void 0, void 0, function* () {
    const { stdout } = yield runner_1.runner()('init', '--help');
    expect(stdout).toMatchSnapshot();
}));
it('As a user, I can use help flag for see help information for `init` command.', () => __awaiter(this, void 0, void 0, function* () {
    const { stdout } = yield runner_1.runner()('init', TEST_DIR);
    expect(stdout.replace(/Time: \d+ ms\./, 'Time: 100 ms.')).toMatchSnapshot();
    const { stdout: ls } = yield execa.shell(`ls -1 ${TEST_DIR}/** | sort`);
    expect(ls.split("\n").sort()).toMatchSnapshot();
}));
afterEach(() => __awaiter(this, void 0, void 0, function* () {
    yield execa.shell(`rm -rf ${TEST_DIR}`);
}));
//# sourceMappingURL=init.test.js.map