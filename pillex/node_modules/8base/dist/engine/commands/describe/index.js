"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const url = require("url");
const chalk_1 = require("chalk");
const Colors_1 = require("../../../consts/Colors");
const _ = require("lodash");
const tabSize = 30;
const printResolvers = (resolvers, context) => {
    if (!_.isArray(resolvers)) {
        return;
    }
    context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)("Resolvers:")}`);
    resolvers.map(r => {
        let out = `   ${r.name}`;
        out = _.padEnd(out, tabSize);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("type")}: ${r.gqlType} `;
        context.logger.info(out);
    });
};
const printTriggers = (triggers, context) => {
    if (!_.isArray(triggers)) {
        return;
    }
    context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)("Triggers:")}`);
    triggers.map(r => {
        let out = `   ${r.name}`;
        out = _.padEnd(out, tabSize);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("type")}: ${r.type} `;
        out = _.padEnd(out, tabSize * 2);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("table")}: ${r.tableName}`;
        out = _.padEnd(out, tabSize * 3);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("operation")}: ${r.operation} `;
        context.logger.info(out);
    });
};
const printWebhooks = (webhooks, context) => {
    if (!_.isArray(webhooks)) {
        return;
    }
    context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)("Webhooks:")}`);
    webhooks.map(r => {
        let out = `   ${r.name}`;
        out = _.padEnd(out, tabSize);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("method")}: ${r.httpMethod} `;
        out = _.padEnd(out, tabSize * 2);
        out += `${chalk_1.default.hex(Colors_1.Colors.yellow)("path")}: ${r.fullPath} `;
        context.logger.info(out);
    });
};
const transformWebhook = (webhook, context) => {
    return Object.assign({}, webhook, { httpMethod: webhook.httpMethod.toUpperCase(), fullPath: url.resolve(context.serverAddress, webhook.workspaceRelativePath) });
};
exports.default = {
    name: "describe",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        context.spinner.start(context.i18n.t("describe_progress"));
        const result = (yield context.request(GraphqlActions_1.GraphqlActions.describe)).describeExtensions;
        context.spinner.stop();
        printResolvers(result.resolvers, context);
        context.logger.info("");
        printTriggers(result.triggers, context);
        context.logger.info("");
        const webhooks = result.webhooks ? result.webhooks.map((w) => transformWebhook(w, context)) : [];
        printWebhooks(webhooks, context);
    }),
    describe: translations_1.translations.i18n.t("describe_describe"),
    builder: (args) => {
        return args.usage(translations_1.translations.i18n.t("describe_usage"));
    }
};
//# sourceMappingURL=index.js.map