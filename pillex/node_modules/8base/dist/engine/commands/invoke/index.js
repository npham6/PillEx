"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const fs = require("fs");
exports.default = {
    name: "invoke",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        context.spinner.start(context.i18n.t("invoke_in_progress"));
        const args = params.j ? params.j
            : params.p ? fs.readFileSync(params.p) : null;
        const result = yield context.request(GraphqlActions_1.GraphqlActions.invoke, { data: { functionName: params._[1], inputArgs: args } });
        context.spinner.stop();
        context.logger.info(result.invoke.responseData);
    }),
    describe: translations_1.translations.i18n.t("invoke_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("invoke_usage"))
            .demand(1)
            .option("j", {
            alias: 'data-json',
            describe: "input JSON",
            type: "string"
        })
            .option("p", {
            alias: 'data-path',
            describe: "path to input JSON",
            type: "string"
        });
    }
};
//# sourceMappingURL=index.js.map