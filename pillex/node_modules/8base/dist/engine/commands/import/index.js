"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const translations_1 = require("../../../common/translations");
const { importTables, importData } = require("@8base/api-client");
exports.default = {
    name: "import",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        let schema;
        if (fs.existsSync(params.file)) {
            try {
                schema = JSON.parse(fs.readFileSync(params.file, 'utf8'));
            }
            catch (e) {
                throw new Error(translations_1.translations.i18n.t("import_cant_parse_schema"));
            }
        }
        else {
            throw new Error(translations_1.translations.i18n.t("import_file_not_exist"));
        }
        // if (context.version !== schema.version) {
        //   throw new Error(translations.i18n.t("import_schema_different_version"));
        // }
        if (params.schema) {
            context.spinner.start(context.i18n.t("import_schema_in_progress"));
            yield importTables(context.request.bind(context), schema.tables);
            context.spinner.stop();
        }
        if (params.data) {
            context.spinner.start(context.i18n.t("import_data_in_progress"));
            yield importData(context.request.bind(context), schema.data);
            context.spinner.stop();
        }
    }),
    describe: translations_1.translations.i18n.t("import_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("import_usage"))
            .option("f", {
            alias: 'file',
            demandOption: true,
            describe: translations_1.translations.i18n.t("import_file_describe"),
            type: "string"
        }).option("schema", {
            describe: translations_1.translations.i18n.t("import_schema_describe"),
            default: true,
            type: "boolean"
        }).option("data", {
            describe: translations_1.translations.i18n.t("import_data_describe"),
            default: true,
            type: "boolean"
        });
    }
};
//# sourceMappingURL=index.js.map