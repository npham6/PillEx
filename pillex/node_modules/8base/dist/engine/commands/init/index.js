"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const providers_1 = require("./providers");
const _ = require("lodash");
const installer_1 = require("./installer");
const path = require("path");
const translations_1 = require("../../../common/translations");
const chalk_1 = require("chalk");
const Colors_1 = require("../../../consts/Colors");
exports.default = {
    name: "init",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        const parameters = _.castArray(params._);
        const project = parameters.length > 1
            ? { fullPath: path.join(context.config.rootExecutionDir, parameters[1]), name: parameters[1] }
            : { fullPath: context.config.rootExecutionDir, name: path.basename(context.config.rootExecutionDir) };
        context.logger.debug("start initialize init command");
        context.logger.debug(`initialize success: initialize repository: ${project.name}`);
        let files = yield providers_1.getFileProvider().provide(context);
        context.logger.debug("files provided count = " + files.size);
        files.set(context.config.packageFileName, replaceServiceName(files.get(context.config.packageFileName)));
        context.logger.debug("try to install files");
        installer_1.install(project.fullPath, files, context);
        context.logger.info(`Project ${chalk_1.default.hex(Colors_1.Colors.yellow)(project.name)} initialize success`);
    }),
    describe: translations_1.translations.i18n.t("init_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("init_usage"))
            .example(translations_1.translations.i18n.t("init_no_dir_example_command"), translations_1.translations.i18n.t("init_example_no_dir"))
            .example(translations_1.translations.i18n.t("init_with_dir_example_command"), translations_1.translations.i18n.t("init_example_with_dir"));
    }
};
const replaceServiceName = (packageFile) => {
    let packageData = JSON.parse(packageFile);
    packageData.name = this.repositoryName;
    return JSON.stringify(packageData, null, 2);
};
//# sourceMappingURL=index.js.map