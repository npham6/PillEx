"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../common/utils");
const graphqlController_1 = require("../../controllers/graphqlController");
const buildController_1 = require("../../controllers/buildController");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const translations_1 = require("../../../common/translations");
const DeployStatus_1 = require("../../../consts/DeployStatus");
exports.default = {
    name: "deploy",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.spinner.start(context.i18n.t("deploy_in_progress", { status: "prepare to upload" }));
        context.initializeProject();
        if (params["validate_schema"]) {
            graphqlController_1.GraphqlController.validateSchema(context.project);
        }
        const buildDir = yield buildController_1.BuildController.package(context);
        context.logger.debug(`build dir: ${buildDir}`);
        const { prepareDeploy } = yield context.request(GraphqlActions_1.GraphqlActions.prepareDeploy);
        yield utils_1.Utils.upload(prepareDeploy.uploadMetaDataUrl, buildDir.meta, context);
        context.logger.debug("upload meta data complete");
        yield utils_1.Utils.upload(prepareDeploy.uploadBuildUrl, buildDir.build, context);
        context.logger.debug("upload source code complete");
        yield context.request(GraphqlActions_1.GraphqlActions.deploy, { data: { buildName: prepareDeploy.buildName } });
        let result;
        do {
            result = (yield context.request(GraphqlActions_1.GraphqlActions.deployStatus, { buildName: prepareDeploy.buildName })).deployStatus;
            context.logger.debug(result);
            yield utils_1.Utils.sleep(2000);
            context.spinner.stop();
            context.spinner.start(context.i18n.t("deploy_in_progress", { status: result.status, message: result.message }));
        } while (result.status !== DeployStatus_1.DeployStatus.completeSuccess && result.status !== DeployStatus_1.DeployStatus.completeError);
        if (result.status === DeployStatus_1.DeployStatus.completeError) {
            let gqlError;
            try {
                gqlError = JSON.parse(result.message); // result.message contains valid gqlError, should be threw as is
            }
            catch (e) {
                throw new Error(result.message);
            }
            throw gqlError;
        }
        context.spinner.stop();
    }),
    describe: translations_1.translations.i18n.t("deploy_describe"),
    builder: (args) => {
        return args.usage(translations_1.translations.i18n.t("deploy_usage"));
    }
};
//# sourceMappingURL=index.js.map