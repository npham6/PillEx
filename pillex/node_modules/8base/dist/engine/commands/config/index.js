"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const StorageParameters_1 = require("../../../consts/StorageParameters");
const chalk_1 = require("chalk");
const Colors_1 = require("../../../consts/Colors");
exports.default = {
    name: "config",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        if (params.v) {
            for (const key of Object.keys(StorageParameters_1.StorageParameters)) {
                context.logger.info(`${key}: ${JSON.stringify(context.storage.getValue(StorageParameters_1.StorageParameters[key]), null, 2)}\n`);
            }
            return;
        }
        if (params.s) {
            context.storage.setValues([
                {
                    name: StorageParameters_1.StorageParameters.serverAddress,
                    value: params.s
                }
            ]);
            context.logger.info(`Set remote address ${chalk_1.default.hex(Colors_1.Colors.yellow)(params.s)}.`);
            return;
        }
        yield context.chooseWorkspace(params.w);
    }),
    describe: translations_1.translations.i18n.t("config_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("config_usage"))
            .option("w", {
            alias: 'workspace',
            describe: translations_1.translations.i18n.t("config_workspace_option"),
            type: "string"
        })
            .option("s", {
            alias: 'server',
            type: "string",
            hidden: true
        })
            .option("v", {
            alias: 'view',
            type: "boolean",
            hidden: true
        });
    }
};
//# sourceMappingURL=index.js.map