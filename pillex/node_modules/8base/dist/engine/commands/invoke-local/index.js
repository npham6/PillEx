"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const utils_1 = require("../../../common/utils");
const buildController_1 = require("../../controllers/buildController");
const chalk_1 = require("chalk");
const Colors_1 = require("../../../consts/Colors");
const fs = require("fs");
exports.default = {
    name: "invoke-local",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        context.spinner.start(context.i18n.t("invokelocal_in_progress"));
        const { compiledFiles } = yield buildController_1.BuildController.compile(context);
        const targetFunctionName = params._[1];
        const functionInfo = context.project.extensions.functions.find(r => r.name === targetFunctionName);
        if (!functionInfo) {
            throw new Error(`Function ${chalk_1.default.hex(Colors_1.Colors.yellow)(targetFunctionName)} not present.`);
        }
        const funcPath = compiledFiles.find((f) => f.search(functionInfo.name + "\.") > 0);
        context.logger.debug(`Function full path: ${funcPath}`);
        const { result, error } = utils_1.Utils.safeExecution(() => require(funcPath));
        if (error) {
            throw new Error(`Function path ${funcPath} not present.`);
        }
        const funcToCall = utils_1.Utils.undefault(result);
        const args = params.j ? params.j : params.p ? fs.readFileSync(params.p) : null;
        context.spinner.stop();
        const funcResult = yield funcToCall(JSON.parse(args));
        context.logger.info("\nResult:");
        context.logger.info(JSON.stringify(funcResult, null, 2));
    }),
    describe: translations_1.translations.i18n.t("invokelocal_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("invokelocal_usage"))
            .demand(1)
            .option("j", {
            alias: 'data-json',
            describe: "input JSON",
            type: "string"
        })
            .option("p", {
            alias: 'data-path',
            describe: "path to input JSON",
            type: "string"
        });
    }
};
//# sourceMappingURL=index.js.map