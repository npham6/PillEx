"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const buildController_1 = require("../../controllers/buildController");
const fs = require("fs-extra");
const path = require("path");
const translations_1 = require("../../../common/translations");
exports.default = {
    name: "package",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.spinner.start(context.i18n.t("package_progress"));
        context.initializeProject();
        const { build, meta } = yield buildController_1.BuildController.package(context);
        build.pipe(fs.createWriteStream(path.join(context.config.packageDir, "build.zip")));
        meta.pipe(fs.createWriteStream(path.join(context.config.packageDir, "meta.zip")));
        context.logger.debug(`package directory ${context.config.packageFolder}`);
    }),
    describe: translations_1.translations.i18n.t("package_describe"),
    builder: (args) => {
        return args.usage(translations_1.translations.i18n.t("package_usage"));
    }
};
//# sourceMappingURL=index.js.map