"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const translations_1 = require("../../../common/translations");
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
let lastMessage = "";
const filterMessage = (messages) => {
    const index = messages.indexOf(lastMessage);
    if (index === -1) {
        lastMessage = messages.length > 0 ? _.last(messages) : "";
        return messages;
    }
    if (index + 1 === messages.length) {
        return [];
    }
    lastMessage = _.last(messages);
    return _.slice(messages, index);
};
const readLogs = (functionName, context) => __awaiter(this, void 0, void 0, function* () {
    while (true) {
        const MS_PER_MINUTE = 60000;
        const minutes = 3;
        const start = new Date(Date.now() - minutes * MS_PER_MINUTE);
        const result = yield context.request(GraphqlActions_1.GraphqlActions.logs, { functionName, startTime: start.toISOString() });
        const logs = filterMessage(result.logs);
        if (logs.length > 0) {
            context.logger.info(logs);
        }
        yield sleep(1000);
    }
});
exports.default = {
    name: "logs",
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        if (params["t"]) {
            return yield readLogs(params._[1], context);
        }
        context.spinner.start(context.i18n.t("logs_in_progress"));
        const result = yield context.request(GraphqlActions_1.GraphqlActions.logs, { functionName: params._[1], limit: params.n });
        context.spinner.stop();
        context.logger.info(result.logs);
    }),
    describe: translations_1.translations.i18n.t("logs_describe"),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t("logs_usage"))
            .demand(1)
            .option("n", {
            alias: 'num',
            default: 10,
            describe: "number of lines to display (default: 10, max: 100)",
            type: "number",
            coerce: arg => arg > 100 ? 100 : arg
        })
            .option("t", {
            alias: 'tail',
            describe: "continually stream logs",
            type: "boolean"
        });
    }
};
//# sourceMappingURL=index.js.map