{"version":3,"sources":["Credentials.js"],"names":["async","metadata","creds","await","fetchCredentials","credentialsExistForPlatformAsync","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","Api","callMethodAsync","Error","newCredentials","userCredentialsIds","updateCredentialsForPlatform","removeCredentialsForPlatform","appleTeamId","distCerts","getExistingUserCredentials","map","usedByApps","userCredentialsId","certId","certP12","certPassword","serialNumber","IosCodeSigning","findP12CertSerialNumber","let","name","join","value","distCertSerialNumber","String","getExistingDistCerts","pushKeys","apnsKeyId","getExistingPushKeys","type","certs","rest","split","outputPath","log","logger","info","bind","logSecrets","credentialMetadata","keystore","keystorePassword","keystoreAlias","keyAlias","keyPassword","storeBuf","Buffer","from","fs","writeFile","chalk","bold","backupExistingAndroidCredentials"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\n\nimport Api from './Api';\nimport logger from './Logger';\nimport * as IosCodeSigning from './detach/IosCodeSigning';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type Credentials = IOSCredentials | AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string,\n};\n\nexport type CredObject = {\n  name: string,\n  value: {\n    userCredentialsId?: string,\n    serialNumber?: string,\n  },\n};\n\nexport type CredsList = Array<CredObject>;\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  const creds = await fetchCredentials(metadata, false);\n  return !!creds; // !! performed on awaited creds\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  userCredentialsIds: Array<number>,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    userCredentialsIds,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n}\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string\n): Promise<?CredsList> {\n  const distCerts = await getExistingUserCredentials(username, appleTeamId, 'dist-cert');\n  return distCerts.map(({ usedByApps, userCredentialsId, certId, certP12, certPassword }) => {\n    const serialNumber = IosCodeSigning.findP12CertSerialNumber(certP12, certPassword);\n    let name = `Serial number: ${serialNumber}`;\n    if (certId) {\n      name = `${name}, Certificate ID: ${certId}`;\n    }\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        distCertSerialNumber: serialNumber,\n        userCredentialsId: String(userCredentialsId),\n      },\n      name,\n    };\n  });\n}\n\nexport async function getExistingPushKeys(\n  username: string,\n  appleTeamId: string\n): Promise<?CredsList> {\n  const pushKeys = await getExistingUserCredentials(username, appleTeamId, 'push-key');\n  return pushKeys.map(({ usedByApps, userCredentialsId, apnsKeyId }) => {\n    let name = `Key ID: ${apnsKeyId}`;\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        userCredentialsId,\n      },\n      name,\n    };\n  });\n}\n\nasync function getExistingUserCredentials(\n  username: string,\n  appleTeamId: string,\n  type: string\n): Promise<?CredsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingUserCredentials', [], 'post', {\n    username,\n    appleTeamId,\n    type,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  } else {\n    return certs.map(({ usedByApps, userCredentialsId, ...rest }) => ({\n      usedByApps: usedByApps && usedByApps.split(';'),\n      userCredentialsId: String(userCredentialsId),\n      ...rest,\n    }));\n  }\n}\n\nexport async function backupExistingAndroidCredentials({\n  outputPath,\n  username,\n  experienceName,\n  log = logger.info.bind(logger),\n  logSecrets = true,\n}) {\n  const credentialMetadata = { username, experienceName, platform: 'android' };\n\n  log(`Retreiving Android keystore for ${experienceName}`);\n\n  const credentials = await getCredentialsForPlatform(credentialMetadata);\n  if (!credentials) {\n    throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n  }\n  const { keystore, keystorePassword, keystoreAlias: keyAlias, keyPassword } = credentials;\n\n  const storeBuf = Buffer.from(keystore, 'base64');\n  log(`Writing keystore to ${outputPath}...`);\n  await fs.writeFile(outputPath, storeBuf);\n  if (logSecrets) {\n    log('Done writing keystore to disk.');\n    log(`Save these important values as well:\n\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n  `);\n    log('All done!');\n  }\n  return {\n    keystorePassword,\n    keyAlias,\n    keyPassword,\n  };\n}\n"],"sourceRoot":"/xdl@52.1.1/src"}